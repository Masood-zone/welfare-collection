
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WelfareProgram
 * 
 */
export type WelfareProgram = $Result.DefaultSelection<Prisma.$WelfareProgramPayload>
/**
 * Model Enrollment
 * 
 */
export type Enrollment = $Result.DefaultSelection<Prisma.$EnrollmentPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model PaymentTracker
 * 
 */
export type PaymentTracker = $Result.DefaultSelection<Prisma.$PaymentTrackerPayload>
/**
 * Model Expense
 * 
 */
export type Expense = $Result.DefaultSelection<Prisma.$ExpensePayload>
/**
 * Model Analytics
 * 
 */
export type Analytics = $Result.DefaultSelection<Prisma.$AnalyticsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  MEMBER: 'MEMBER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const PaymentCycle: {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

export type PaymentCycle = (typeof PaymentCycle)[keyof typeof PaymentCycle]


export const FormStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type FormStatus = (typeof FormStatus)[keyof typeof FormStatus]


export const EnrollmentStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type EnrollmentStatus = (typeof EnrollmentStatus)[keyof typeof EnrollmentStatus]


export const PaymentMode: {
  MOMO: 'MOMO',
  CARD: 'CARD',
  CASH: 'CASH'
};

export type PaymentMode = (typeof PaymentMode)[keyof typeof PaymentMode]


export const PaymentStatus: {
  PAID: 'PAID',
  UNPAID: 'UNPAID',
  PREPAID: 'PREPAID'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type PaymentCycle = $Enums.PaymentCycle

export const PaymentCycle: typeof $Enums.PaymentCycle

export type FormStatus = $Enums.FormStatus

export const FormStatus: typeof $Enums.FormStatus

export type EnrollmentStatus = $Enums.EnrollmentStatus

export const EnrollmentStatus: typeof $Enums.EnrollmentStatus

export type PaymentMode = $Enums.PaymentMode

export const PaymentMode: typeof $Enums.PaymentMode

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.welfareProgram`: Exposes CRUD operations for the **WelfareProgram** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WelfarePrograms
    * const welfarePrograms = await prisma.welfareProgram.findMany()
    * ```
    */
  get welfareProgram(): Prisma.WelfareProgramDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentTracker`: Exposes CRUD operations for the **PaymentTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentTrackers
    * const paymentTrackers = await prisma.paymentTracker.findMany()
    * ```
    */
  get paymentTracker(): Prisma.PaymentTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expense`: Exposes CRUD operations for the **Expense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expense.findMany()
    * ```
    */
  get expense(): Prisma.ExpenseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.analytics`: Exposes CRUD operations for the **Analytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Analytics
    * const analytics = await prisma.analytics.findMany()
    * ```
    */
  get analytics(): Prisma.AnalyticsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    WelfareProgram: 'WelfareProgram',
    Enrollment: 'Enrollment',
    Payment: 'Payment',
    PaymentTracker: 'PaymentTracker',
    Expense: 'Expense',
    Analytics: 'Analytics'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "welfareProgram" | "enrollment" | "payment" | "paymentTracker" | "expense" | "analytics"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WelfareProgram: {
        payload: Prisma.$WelfareProgramPayload<ExtArgs>
        fields: Prisma.WelfareProgramFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WelfareProgramFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WelfareProgramFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>
          }
          findFirst: {
            args: Prisma.WelfareProgramFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WelfareProgramFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>
          }
          findMany: {
            args: Prisma.WelfareProgramFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>[]
          }
          create: {
            args: Prisma.WelfareProgramCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>
          }
          createMany: {
            args: Prisma.WelfareProgramCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WelfareProgramCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>[]
          }
          delete: {
            args: Prisma.WelfareProgramDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>
          }
          update: {
            args: Prisma.WelfareProgramUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>
          }
          deleteMany: {
            args: Prisma.WelfareProgramDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WelfareProgramUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WelfareProgramUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>[]
          }
          upsert: {
            args: Prisma.WelfareProgramUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WelfareProgramPayload>
          }
          aggregate: {
            args: Prisma.WelfareProgramAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWelfareProgram>
          }
          groupBy: {
            args: Prisma.WelfareProgramGroupByArgs<ExtArgs>
            result: $Utils.Optional<WelfareProgramGroupByOutputType>[]
          }
          count: {
            args: Prisma.WelfareProgramCountArgs<ExtArgs>
            result: $Utils.Optional<WelfareProgramCountAggregateOutputType> | number
          }
        }
      }
      Enrollment: {
        payload: Prisma.$EnrollmentPayload<ExtArgs>
        fields: Prisma.EnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findMany: {
            args: Prisma.EnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          create: {
            args: Prisma.EnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          createMany: {
            args: Prisma.EnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          delete: {
            args: Prisma.EnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          update: {
            args: Prisma.EnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EnrollmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          upsert: {
            args: Prisma.EnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollment>
          }
          groupBy: {
            args: Prisma.EnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      PaymentTracker: {
        payload: Prisma.$PaymentTrackerPayload<ExtArgs>
        fields: Prisma.PaymentTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>
          }
          findFirst: {
            args: Prisma.PaymentTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>
          }
          findMany: {
            args: Prisma.PaymentTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>[]
          }
          create: {
            args: Prisma.PaymentTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>
          }
          createMany: {
            args: Prisma.PaymentTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>[]
          }
          delete: {
            args: Prisma.PaymentTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>
          }
          update: {
            args: Prisma.PaymentTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>
          }
          deleteMany: {
            args: Prisma.PaymentTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>[]
          }
          upsert: {
            args: Prisma.PaymentTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTrackerPayload>
          }
          aggregate: {
            args: Prisma.PaymentTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentTracker>
          }
          groupBy: {
            args: Prisma.PaymentTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentTrackerCountAggregateOutputType> | number
          }
        }
      }
      Expense: {
        payload: Prisma.$ExpensePayload<ExtArgs>
        fields: Prisma.ExpenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          findFirst: {
            args: Prisma.ExpenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          findMany: {
            args: Prisma.ExpenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          create: {
            args: Prisma.ExpenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          createMany: {
            args: Prisma.ExpenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpenseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          delete: {
            args: Prisma.ExpenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          update: {
            args: Prisma.ExpenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          deleteMany: {
            args: Prisma.ExpenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExpenseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          upsert: {
            args: Prisma.ExpenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          aggregate: {
            args: Prisma.ExpenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpense>
          }
          groupBy: {
            args: Prisma.ExpenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenseCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseCountAggregateOutputType> | number
          }
        }
      }
      Analytics: {
        payload: Prisma.$AnalyticsPayload<ExtArgs>
        fields: Prisma.AnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>
          }
          findFirst: {
            args: Prisma.AnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>
          }
          findMany: {
            args: Prisma.AnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>[]
          }
          create: {
            args: Prisma.AnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>
          }
          createMany: {
            args: Prisma.AnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnalyticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>[]
          }
          delete: {
            args: Prisma.AnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>
          }
          update: {
            args: Prisma.AnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.AnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnalyticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>[]
          }
          upsert: {
            args: Prisma.AnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsPayload>
          }
          aggregate: {
            args: Prisma.AnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnalytics>
          }
          groupBy: {
            args: Prisma.AnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    welfareProgram?: WelfareProgramOmit
    enrollment?: EnrollmentOmit
    payment?: PaymentOmit
    paymentTracker?: PaymentTrackerOmit
    expense?: ExpenseOmit
    analytics?: AnalyticsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    enrollments: number
    payments: number
    paymentTrackers: number
    WelfarePrograms: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs
    payments?: boolean | UserCountOutputTypeCountPaymentsArgs
    paymentTrackers?: boolean | UserCountOutputTypeCountPaymentTrackersArgs
    WelfarePrograms?: boolean | UserCountOutputTypeCountWelfareProgramsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentTrackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTrackerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWelfareProgramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WelfareProgramWhereInput
  }


  /**
   * Count Type WelfareProgramCountOutputType
   */

  export type WelfareProgramCountOutputType = {
    enrollments: number
    payments: number
    paymentTrackers: number
    expenses: number
  }

  export type WelfareProgramCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | WelfareProgramCountOutputTypeCountEnrollmentsArgs
    payments?: boolean | WelfareProgramCountOutputTypeCountPaymentsArgs
    paymentTrackers?: boolean | WelfareProgramCountOutputTypeCountPaymentTrackersArgs
    expenses?: boolean | WelfareProgramCountOutputTypeCountExpensesArgs
  }

  // Custom InputTypes
  /**
   * WelfareProgramCountOutputType without action
   */
  export type WelfareProgramCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgramCountOutputType
     */
    select?: WelfareProgramCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WelfareProgramCountOutputType without action
   */
  export type WelfareProgramCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * WelfareProgramCountOutputType without action
   */
  export type WelfareProgramCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * WelfareProgramCountOutputType without action
   */
  export type WelfareProgramCountOutputTypeCountPaymentTrackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTrackerWhereInput
  }

  /**
   * WelfareProgramCountOutputType without action
   */
  export type WelfareProgramCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    paymentTrackers: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentTrackers?: boolean | PaymentCountOutputTypeCountPaymentTrackersArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountPaymentTrackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTrackerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    role: $Enums.Role | null
    registeredAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    role: $Enums.Role | null
    registeredAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phoneNumber: number
    password: number
    role: number
    registeredAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    password?: true
    role?: true
    registeredAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    password?: true
    role?: true
    registeredAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    password?: true
    role?: true
    registeredAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role: $Enums.Role
    registeredAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    registeredAt?: boolean
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    payments?: boolean | User$paymentsArgs<ExtArgs>
    paymentTrackers?: boolean | User$paymentTrackersArgs<ExtArgs>
    WelfarePrograms?: boolean | User$WelfareProgramsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    registeredAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    registeredAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    registeredAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phoneNumber" | "password" | "role" | "registeredAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    payments?: boolean | User$paymentsArgs<ExtArgs>
    paymentTrackers?: boolean | User$paymentTrackersArgs<ExtArgs>
    WelfarePrograms?: boolean | User$WelfareProgramsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      paymentTrackers: Prisma.$PaymentTrackerPayload<ExtArgs>[]
      WelfarePrograms: Prisma.$WelfareProgramPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      phoneNumber: string
      password: string
      role: $Enums.Role
      registeredAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends User$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    payments<T extends User$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    paymentTrackers<T extends User$paymentTrackersArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentTrackersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    WelfarePrograms<T extends User$WelfareProgramsArgs<ExtArgs> = {}>(args?: Subset<T, User$WelfareProgramsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly registeredAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.enrollments
   */
  export type User$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * User.payments
   */
  export type User$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User.paymentTrackers
   */
  export type User$paymentTrackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    where?: PaymentTrackerWhereInput
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    cursor?: PaymentTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTrackerScalarFieldEnum | PaymentTrackerScalarFieldEnum[]
  }

  /**
   * User.WelfarePrograms
   */
  export type User$WelfareProgramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    where?: WelfareProgramWhereInput
    orderBy?: WelfareProgramOrderByWithRelationInput | WelfareProgramOrderByWithRelationInput[]
    cursor?: WelfareProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WelfareProgramScalarFieldEnum | WelfareProgramScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WelfareProgram
   */

  export type AggregateWelfareProgram = {
    _count: WelfareProgramCountAggregateOutputType | null
    _avg: WelfareProgramAvgAggregateOutputType | null
    _sum: WelfareProgramSumAggregateOutputType | null
    _min: WelfareProgramMinAggregateOutputType | null
    _max: WelfareProgramMaxAggregateOutputType | null
  }

  export type WelfareProgramAvgAggregateOutputType = {
    amount: number | null
    expectedAmount: number | null
  }

  export type WelfareProgramSumAggregateOutputType = {
    amount: number | null
    expectedAmount: number | null
  }

  export type WelfareProgramMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    amount: number | null
    expectedAmount: number | null
    paymentCycle: $Enums.PaymentCycle | null
    createdBy: string | null
    createdAt: Date | null
  }

  export type WelfareProgramMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    amount: number | null
    expectedAmount: number | null
    paymentCycle: $Enums.PaymentCycle | null
    createdBy: string | null
    createdAt: Date | null
  }

  export type WelfareProgramCountAggregateOutputType = {
    id: number
    name: number
    description: number
    amount: number
    expectedAmount: number
    paymentCycle: number
    createdBy: number
    createdAt: number
    _all: number
  }


  export type WelfareProgramAvgAggregateInputType = {
    amount?: true
    expectedAmount?: true
  }

  export type WelfareProgramSumAggregateInputType = {
    amount?: true
    expectedAmount?: true
  }

  export type WelfareProgramMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    amount?: true
    expectedAmount?: true
    paymentCycle?: true
    createdBy?: true
    createdAt?: true
  }

  export type WelfareProgramMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    amount?: true
    expectedAmount?: true
    paymentCycle?: true
    createdBy?: true
    createdAt?: true
  }

  export type WelfareProgramCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    amount?: true
    expectedAmount?: true
    paymentCycle?: true
    createdBy?: true
    createdAt?: true
    _all?: true
  }

  export type WelfareProgramAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WelfareProgram to aggregate.
     */
    where?: WelfareProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelfarePrograms to fetch.
     */
    orderBy?: WelfareProgramOrderByWithRelationInput | WelfareProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WelfareProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelfarePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelfarePrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WelfarePrograms
    **/
    _count?: true | WelfareProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WelfareProgramAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WelfareProgramSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WelfareProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WelfareProgramMaxAggregateInputType
  }

  export type GetWelfareProgramAggregateType<T extends WelfareProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateWelfareProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWelfareProgram[P]>
      : GetScalarType<T[P], AggregateWelfareProgram[P]>
  }




  export type WelfareProgramGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WelfareProgramWhereInput
    orderBy?: WelfareProgramOrderByWithAggregationInput | WelfareProgramOrderByWithAggregationInput[]
    by: WelfareProgramScalarFieldEnum[] | WelfareProgramScalarFieldEnum
    having?: WelfareProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WelfareProgramCountAggregateInputType | true
    _avg?: WelfareProgramAvgAggregateInputType
    _sum?: WelfareProgramSumAggregateInputType
    _min?: WelfareProgramMinAggregateInputType
    _max?: WelfareProgramMaxAggregateInputType
  }

  export type WelfareProgramGroupByOutputType = {
    id: string
    name: string
    description: string
    amount: number
    expectedAmount: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt: Date
    _count: WelfareProgramCountAggregateOutputType | null
    _avg: WelfareProgramAvgAggregateOutputType | null
    _sum: WelfareProgramSumAggregateOutputType | null
    _min: WelfareProgramMinAggregateOutputType | null
    _max: WelfareProgramMaxAggregateOutputType | null
  }

  type GetWelfareProgramGroupByPayload<T extends WelfareProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WelfareProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WelfareProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WelfareProgramGroupByOutputType[P]>
            : GetScalarType<T[P], WelfareProgramGroupByOutputType[P]>
        }
      >
    >


  export type WelfareProgramSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    expectedAmount?: boolean
    paymentCycle?: boolean
    createdBy?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    enrollments?: boolean | WelfareProgram$enrollmentsArgs<ExtArgs>
    payments?: boolean | WelfareProgram$paymentsArgs<ExtArgs>
    paymentTrackers?: boolean | WelfareProgram$paymentTrackersArgs<ExtArgs>
    expenses?: boolean | WelfareProgram$expensesArgs<ExtArgs>
    _count?: boolean | WelfareProgramCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["welfareProgram"]>

  export type WelfareProgramSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    expectedAmount?: boolean
    paymentCycle?: boolean
    createdBy?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["welfareProgram"]>

  export type WelfareProgramSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    expectedAmount?: boolean
    paymentCycle?: boolean
    createdBy?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["welfareProgram"]>

  export type WelfareProgramSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    expectedAmount?: boolean
    paymentCycle?: boolean
    createdBy?: boolean
    createdAt?: boolean
  }

  export type WelfareProgramOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "amount" | "expectedAmount" | "paymentCycle" | "createdBy" | "createdAt", ExtArgs["result"]["welfareProgram"]>
  export type WelfareProgramInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    enrollments?: boolean | WelfareProgram$enrollmentsArgs<ExtArgs>
    payments?: boolean | WelfareProgram$paymentsArgs<ExtArgs>
    paymentTrackers?: boolean | WelfareProgram$paymentTrackersArgs<ExtArgs>
    expenses?: boolean | WelfareProgram$expensesArgs<ExtArgs>
    _count?: boolean | WelfareProgramCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WelfareProgramIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WelfareProgramIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WelfareProgramPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WelfareProgram"
    objects: {
      createdByUser: Prisma.$UserPayload<ExtArgs>
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      paymentTrackers: Prisma.$PaymentTrackerPayload<ExtArgs>[]
      expenses: Prisma.$ExpensePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      amount: number
      expectedAmount: number
      paymentCycle: $Enums.PaymentCycle
      createdBy: string
      createdAt: Date
    }, ExtArgs["result"]["welfareProgram"]>
    composites: {}
  }

  type WelfareProgramGetPayload<S extends boolean | null | undefined | WelfareProgramDefaultArgs> = $Result.GetResult<Prisma.$WelfareProgramPayload, S>

  type WelfareProgramCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WelfareProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WelfareProgramCountAggregateInputType | true
    }

  export interface WelfareProgramDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WelfareProgram'], meta: { name: 'WelfareProgram' } }
    /**
     * Find zero or one WelfareProgram that matches the filter.
     * @param {WelfareProgramFindUniqueArgs} args - Arguments to find a WelfareProgram
     * @example
     * // Get one WelfareProgram
     * const welfareProgram = await prisma.welfareProgram.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WelfareProgramFindUniqueArgs>(args: SelectSubset<T, WelfareProgramFindUniqueArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WelfareProgram that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WelfareProgramFindUniqueOrThrowArgs} args - Arguments to find a WelfareProgram
     * @example
     * // Get one WelfareProgram
     * const welfareProgram = await prisma.welfareProgram.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WelfareProgramFindUniqueOrThrowArgs>(args: SelectSubset<T, WelfareProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WelfareProgram that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramFindFirstArgs} args - Arguments to find a WelfareProgram
     * @example
     * // Get one WelfareProgram
     * const welfareProgram = await prisma.welfareProgram.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WelfareProgramFindFirstArgs>(args?: SelectSubset<T, WelfareProgramFindFirstArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WelfareProgram that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramFindFirstOrThrowArgs} args - Arguments to find a WelfareProgram
     * @example
     * // Get one WelfareProgram
     * const welfareProgram = await prisma.welfareProgram.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WelfareProgramFindFirstOrThrowArgs>(args?: SelectSubset<T, WelfareProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WelfarePrograms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WelfarePrograms
     * const welfarePrograms = await prisma.welfareProgram.findMany()
     * 
     * // Get first 10 WelfarePrograms
     * const welfarePrograms = await prisma.welfareProgram.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const welfareProgramWithIdOnly = await prisma.welfareProgram.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WelfareProgramFindManyArgs>(args?: SelectSubset<T, WelfareProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WelfareProgram.
     * @param {WelfareProgramCreateArgs} args - Arguments to create a WelfareProgram.
     * @example
     * // Create one WelfareProgram
     * const WelfareProgram = await prisma.welfareProgram.create({
     *   data: {
     *     // ... data to create a WelfareProgram
     *   }
     * })
     * 
     */
    create<T extends WelfareProgramCreateArgs>(args: SelectSubset<T, WelfareProgramCreateArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WelfarePrograms.
     * @param {WelfareProgramCreateManyArgs} args - Arguments to create many WelfarePrograms.
     * @example
     * // Create many WelfarePrograms
     * const welfareProgram = await prisma.welfareProgram.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WelfareProgramCreateManyArgs>(args?: SelectSubset<T, WelfareProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WelfarePrograms and returns the data saved in the database.
     * @param {WelfareProgramCreateManyAndReturnArgs} args - Arguments to create many WelfarePrograms.
     * @example
     * // Create many WelfarePrograms
     * const welfareProgram = await prisma.welfareProgram.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WelfarePrograms and only return the `id`
     * const welfareProgramWithIdOnly = await prisma.welfareProgram.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WelfareProgramCreateManyAndReturnArgs>(args?: SelectSubset<T, WelfareProgramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WelfareProgram.
     * @param {WelfareProgramDeleteArgs} args - Arguments to delete one WelfareProgram.
     * @example
     * // Delete one WelfareProgram
     * const WelfareProgram = await prisma.welfareProgram.delete({
     *   where: {
     *     // ... filter to delete one WelfareProgram
     *   }
     * })
     * 
     */
    delete<T extends WelfareProgramDeleteArgs>(args: SelectSubset<T, WelfareProgramDeleteArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WelfareProgram.
     * @param {WelfareProgramUpdateArgs} args - Arguments to update one WelfareProgram.
     * @example
     * // Update one WelfareProgram
     * const welfareProgram = await prisma.welfareProgram.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WelfareProgramUpdateArgs>(args: SelectSubset<T, WelfareProgramUpdateArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WelfarePrograms.
     * @param {WelfareProgramDeleteManyArgs} args - Arguments to filter WelfarePrograms to delete.
     * @example
     * // Delete a few WelfarePrograms
     * const { count } = await prisma.welfareProgram.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WelfareProgramDeleteManyArgs>(args?: SelectSubset<T, WelfareProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WelfarePrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WelfarePrograms
     * const welfareProgram = await prisma.welfareProgram.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WelfareProgramUpdateManyArgs>(args: SelectSubset<T, WelfareProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WelfarePrograms and returns the data updated in the database.
     * @param {WelfareProgramUpdateManyAndReturnArgs} args - Arguments to update many WelfarePrograms.
     * @example
     * // Update many WelfarePrograms
     * const welfareProgram = await prisma.welfareProgram.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WelfarePrograms and only return the `id`
     * const welfareProgramWithIdOnly = await prisma.welfareProgram.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WelfareProgramUpdateManyAndReturnArgs>(args: SelectSubset<T, WelfareProgramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WelfareProgram.
     * @param {WelfareProgramUpsertArgs} args - Arguments to update or create a WelfareProgram.
     * @example
     * // Update or create a WelfareProgram
     * const welfareProgram = await prisma.welfareProgram.upsert({
     *   create: {
     *     // ... data to create a WelfareProgram
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WelfareProgram we want to update
     *   }
     * })
     */
    upsert<T extends WelfareProgramUpsertArgs>(args: SelectSubset<T, WelfareProgramUpsertArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WelfarePrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramCountArgs} args - Arguments to filter WelfarePrograms to count.
     * @example
     * // Count the number of WelfarePrograms
     * const count = await prisma.welfareProgram.count({
     *   where: {
     *     // ... the filter for the WelfarePrograms we want to count
     *   }
     * })
    **/
    count<T extends WelfareProgramCountArgs>(
      args?: Subset<T, WelfareProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WelfareProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WelfareProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WelfareProgramAggregateArgs>(args: Subset<T, WelfareProgramAggregateArgs>): Prisma.PrismaPromise<GetWelfareProgramAggregateType<T>>

    /**
     * Group by WelfareProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WelfareProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WelfareProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WelfareProgramGroupByArgs['orderBy'] }
        : { orderBy?: WelfareProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WelfareProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWelfareProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WelfareProgram model
   */
  readonly fields: WelfareProgramFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WelfareProgram.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WelfareProgramClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    enrollments<T extends WelfareProgram$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgram$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    payments<T extends WelfareProgram$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgram$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    paymentTrackers<T extends WelfareProgram$paymentTrackersArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgram$paymentTrackersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    expenses<T extends WelfareProgram$expensesArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgram$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WelfareProgram model
   */ 
  interface WelfareProgramFieldRefs {
    readonly id: FieldRef<"WelfareProgram", 'String'>
    readonly name: FieldRef<"WelfareProgram", 'String'>
    readonly description: FieldRef<"WelfareProgram", 'String'>
    readonly amount: FieldRef<"WelfareProgram", 'Float'>
    readonly expectedAmount: FieldRef<"WelfareProgram", 'Float'>
    readonly paymentCycle: FieldRef<"WelfareProgram", 'PaymentCycle'>
    readonly createdBy: FieldRef<"WelfareProgram", 'String'>
    readonly createdAt: FieldRef<"WelfareProgram", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WelfareProgram findUnique
   */
  export type WelfareProgramFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * Filter, which WelfareProgram to fetch.
     */
    where: WelfareProgramWhereUniqueInput
  }

  /**
   * WelfareProgram findUniqueOrThrow
   */
  export type WelfareProgramFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * Filter, which WelfareProgram to fetch.
     */
    where: WelfareProgramWhereUniqueInput
  }

  /**
   * WelfareProgram findFirst
   */
  export type WelfareProgramFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * Filter, which WelfareProgram to fetch.
     */
    where?: WelfareProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelfarePrograms to fetch.
     */
    orderBy?: WelfareProgramOrderByWithRelationInput | WelfareProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WelfarePrograms.
     */
    cursor?: WelfareProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelfarePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelfarePrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WelfarePrograms.
     */
    distinct?: WelfareProgramScalarFieldEnum | WelfareProgramScalarFieldEnum[]
  }

  /**
   * WelfareProgram findFirstOrThrow
   */
  export type WelfareProgramFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * Filter, which WelfareProgram to fetch.
     */
    where?: WelfareProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelfarePrograms to fetch.
     */
    orderBy?: WelfareProgramOrderByWithRelationInput | WelfareProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WelfarePrograms.
     */
    cursor?: WelfareProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelfarePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelfarePrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WelfarePrograms.
     */
    distinct?: WelfareProgramScalarFieldEnum | WelfareProgramScalarFieldEnum[]
  }

  /**
   * WelfareProgram findMany
   */
  export type WelfareProgramFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * Filter, which WelfarePrograms to fetch.
     */
    where?: WelfareProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WelfarePrograms to fetch.
     */
    orderBy?: WelfareProgramOrderByWithRelationInput | WelfareProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WelfarePrograms.
     */
    cursor?: WelfareProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WelfarePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WelfarePrograms.
     */
    skip?: number
    distinct?: WelfareProgramScalarFieldEnum | WelfareProgramScalarFieldEnum[]
  }

  /**
   * WelfareProgram create
   */
  export type WelfareProgramCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * The data needed to create a WelfareProgram.
     */
    data: XOR<WelfareProgramCreateInput, WelfareProgramUncheckedCreateInput>
  }

  /**
   * WelfareProgram createMany
   */
  export type WelfareProgramCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WelfarePrograms.
     */
    data: WelfareProgramCreateManyInput | WelfareProgramCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WelfareProgram createManyAndReturn
   */
  export type WelfareProgramCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * The data used to create many WelfarePrograms.
     */
    data: WelfareProgramCreateManyInput | WelfareProgramCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WelfareProgram update
   */
  export type WelfareProgramUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * The data needed to update a WelfareProgram.
     */
    data: XOR<WelfareProgramUpdateInput, WelfareProgramUncheckedUpdateInput>
    /**
     * Choose, which WelfareProgram to update.
     */
    where: WelfareProgramWhereUniqueInput
  }

  /**
   * WelfareProgram updateMany
   */
  export type WelfareProgramUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WelfarePrograms.
     */
    data: XOR<WelfareProgramUpdateManyMutationInput, WelfareProgramUncheckedUpdateManyInput>
    /**
     * Filter which WelfarePrograms to update
     */
    where?: WelfareProgramWhereInput
  }

  /**
   * WelfareProgram updateManyAndReturn
   */
  export type WelfareProgramUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * The data used to update WelfarePrograms.
     */
    data: XOR<WelfareProgramUpdateManyMutationInput, WelfareProgramUncheckedUpdateManyInput>
    /**
     * Filter which WelfarePrograms to update
     */
    where?: WelfareProgramWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WelfareProgram upsert
   */
  export type WelfareProgramUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * The filter to search for the WelfareProgram to update in case it exists.
     */
    where: WelfareProgramWhereUniqueInput
    /**
     * In case the WelfareProgram found by the `where` argument doesn't exist, create a new WelfareProgram with this data.
     */
    create: XOR<WelfareProgramCreateInput, WelfareProgramUncheckedCreateInput>
    /**
     * In case the WelfareProgram was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WelfareProgramUpdateInput, WelfareProgramUncheckedUpdateInput>
  }

  /**
   * WelfareProgram delete
   */
  export type WelfareProgramDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
    /**
     * Filter which WelfareProgram to delete.
     */
    where: WelfareProgramWhereUniqueInput
  }

  /**
   * WelfareProgram deleteMany
   */
  export type WelfareProgramDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WelfarePrograms to delete
     */
    where?: WelfareProgramWhereInput
  }

  /**
   * WelfareProgram.enrollments
   */
  export type WelfareProgram$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * WelfareProgram.payments
   */
  export type WelfareProgram$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * WelfareProgram.paymentTrackers
   */
  export type WelfareProgram$paymentTrackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    where?: PaymentTrackerWhereInput
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    cursor?: PaymentTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTrackerScalarFieldEnum | PaymentTrackerScalarFieldEnum[]
  }

  /**
   * WelfareProgram.expenses
   */
  export type WelfareProgram$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    cursor?: ExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * WelfareProgram without action
   */
  export type WelfareProgramDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WelfareProgram
     */
    select?: WelfareProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WelfareProgram
     */
    omit?: WelfareProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WelfareProgramInclude<ExtArgs> | null
  }


  /**
   * Model Enrollment
   */

  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    welfareProgramId: string | null
    status: $Enums.EnrollmentStatus | null
    enrolledAt: Date | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    welfareProgramId: string | null
    status: $Enums.EnrollmentStatus | null
    enrolledAt: Date | null
  }

  export type EnrollmentCountAggregateOutputType = {
    id: number
    userId: number
    welfareProgramId: number
    status: number
    enrolledAt: number
    _all: number
  }


  export type EnrollmentMinAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    status?: true
    enrolledAt?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    status?: true
    enrolledAt?: true
  }

  export type EnrollmentCountAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    status?: true
    enrolledAt?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollment to aggregate.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithAggregationInput | EnrollmentOrderByWithAggregationInput[]
    by: EnrollmentScalarFieldEnum[] | EnrollmentScalarFieldEnum
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }

  export type EnrollmentGroupByOutputType = {
    id: string
    userId: string
    welfareProgramId: string
    status: $Enums.EnrollmentStatus
    enrolledAt: Date
    _count: EnrollmentCountAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    status?: boolean
    enrolledAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    status?: boolean
    enrolledAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    status?: boolean
    enrolledAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectScalar = {
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    status?: boolean
    enrolledAt?: boolean
  }

  export type EnrollmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "welfareProgramId" | "status" | "enrolledAt", ExtArgs["result"]["enrollment"]>
  export type EnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }
  export type EnrollmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }
  export type EnrollmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }

  export type $EnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      welfareProgram: Prisma.$WelfareProgramPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      welfareProgramId: string
      status: $Enums.EnrollmentStatus
      enrolledAt: Date
    }, ExtArgs["result"]["enrollment"]>
    composites: {}
  }

  type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentPayload, S>

  type EnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnrollmentCountAggregateInputType | true
    }

  export interface EnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollment'], meta: { name: 'Enrollment' } }
    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentFindUniqueArgs>(args: SelectSubset<T, EnrollmentFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Enrollment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentFindFirstArgs>(args?: SelectSubset<T, EnrollmentFindFirstArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentFindManyArgs>(args?: SelectSubset<T, EnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
     */
    create<T extends EnrollmentCreateArgs>(args: SelectSubset<T, EnrollmentCreateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Enrollments.
     * @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentCreateManyArgs>(args?: SelectSubset<T, EnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enrollments and returns the data saved in the database.
     * @param {EnrollmentCreateManyAndReturnArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enrollments and only return the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentDeleteArgs>(args: SelectSubset<T, EnrollmentDeleteArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentUpdateArgs>(args: SelectSubset<T, EnrollmentUpdateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentDeleteManyArgs>(args?: SelectSubset<T, EnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentUpdateManyArgs>(args: SelectSubset<T, EnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments and returns the data updated in the database.
     * @param {EnrollmentUpdateManyAndReturnArgs} args - Arguments to update many Enrollments.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Enrollments and only return the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EnrollmentUpdateManyAndReturnArgs>(args: SelectSubset<T, EnrollmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentUpsertArgs>(args: SelectSubset<T, EnrollmentUpsertArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollment model
   */
  readonly fields: EnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    welfareProgram<T extends WelfareProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgramDefaultArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollment model
   */ 
  interface EnrollmentFieldRefs {
    readonly id: FieldRef<"Enrollment", 'String'>
    readonly userId: FieldRef<"Enrollment", 'String'>
    readonly welfareProgramId: FieldRef<"Enrollment", 'String'>
    readonly status: FieldRef<"Enrollment", 'EnrollmentStatus'>
    readonly enrolledAt: FieldRef<"Enrollment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Enrollment findUnique
   */
  export type EnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findFirst
   */
  export type EnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollment.
     */
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }

  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollment createManyAndReturn
   */
  export type EnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollment.
     */
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment updateManyAndReturn
   */
  export type EnrollmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     */
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     */
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }

  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter which Enrollment to delete.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment without action
   */
  export type EnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    welfareProgramId: string | null
    amount: number | null
    paymentDate: Date | null
    paymentMode: $Enums.PaymentMode | null
    receiptNumber: string | null
    paystackreference: string | null
    access_code: string | null
    status: $Enums.PaymentStatus | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    welfareProgramId: string | null
    amount: number | null
    paymentDate: Date | null
    paymentMode: $Enums.PaymentMode | null
    receiptNumber: string | null
    paystackreference: string | null
    access_code: string | null
    status: $Enums.PaymentStatus | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userId: number
    welfareProgramId: number
    amount: number
    paymentDate: number
    paymentMode: number
    receiptNumber: number
    paystackreference: number
    access_code: number
    status: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    amount?: true
    paymentDate?: true
    paymentMode?: true
    receiptNumber?: true
    paystackreference?: true
    access_code?: true
    status?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    amount?: true
    paymentDate?: true
    paymentMode?: true
    receiptNumber?: true
    paystackreference?: true
    access_code?: true
    status?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    amount?: true
    paymentDate?: true
    paymentMode?: true
    receiptNumber?: true
    paystackreference?: true
    access_code?: true
    status?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    userId: string
    welfareProgramId: string
    amount: number
    paymentDate: Date
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference: string | null
    access_code: string | null
    status: $Enums.PaymentStatus | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    amount?: boolean
    paymentDate?: boolean
    paymentMode?: boolean
    receiptNumber?: boolean
    paystackreference?: boolean
    access_code?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    paymentTrackers?: boolean | Payment$paymentTrackersArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    amount?: boolean
    paymentDate?: boolean
    paymentMode?: boolean
    receiptNumber?: boolean
    paystackreference?: boolean
    access_code?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    amount?: boolean
    paymentDate?: boolean
    paymentMode?: boolean
    receiptNumber?: boolean
    paystackreference?: boolean
    access_code?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    amount?: boolean
    paymentDate?: boolean
    paymentMode?: boolean
    receiptNumber?: boolean
    paystackreference?: boolean
    access_code?: boolean
    status?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "welfareProgramId" | "amount" | "paymentDate" | "paymentMode" | "receiptNumber" | "paystackreference" | "access_code" | "status", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    paymentTrackers?: boolean | Payment$paymentTrackersArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      welfareProgram: Prisma.$WelfareProgramPayload<ExtArgs>
      paymentTrackers: Prisma.$PaymentTrackerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      welfareProgramId: string
      amount: number
      paymentDate: Date
      paymentMode: $Enums.PaymentMode
      receiptNumber: string
      paystackreference: string | null
      access_code: string | null
      status: $Enums.PaymentStatus | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    welfareProgram<T extends WelfareProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgramDefaultArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    paymentTrackers<T extends Payment$paymentTrackersArgs<ExtArgs> = {}>(args?: Subset<T, Payment$paymentTrackersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly userId: FieldRef<"Payment", 'String'>
    readonly welfareProgramId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Float'>
    readonly paymentDate: FieldRef<"Payment", 'DateTime'>
    readonly paymentMode: FieldRef<"Payment", 'PaymentMode'>
    readonly receiptNumber: FieldRef<"Payment", 'String'>
    readonly paystackreference: FieldRef<"Payment", 'String'>
    readonly access_code: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment.paymentTrackers
   */
  export type Payment$paymentTrackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    where?: PaymentTrackerWhereInput
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    cursor?: PaymentTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTrackerScalarFieldEnum | PaymentTrackerScalarFieldEnum[]
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model PaymentTracker
   */

  export type AggregatePaymentTracker = {
    _count: PaymentTrackerCountAggregateOutputType | null
    _avg: PaymentTrackerAvgAggregateOutputType | null
    _sum: PaymentTrackerSumAggregateOutputType | null
    _min: PaymentTrackerMinAggregateOutputType | null
    _max: PaymentTrackerMaxAggregateOutputType | null
  }

  export type PaymentTrackerAvgAggregateOutputType = {
    remainingAmount: number | null
    prepaidAmount: number | null
  }

  export type PaymentTrackerSumAggregateOutputType = {
    remainingAmount: number | null
    prepaidAmount: number | null
  }

  export type PaymentTrackerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    welfareProgramId: string | null
    cycleStart: Date | null
    cycleEnd: Date | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentId: string | null
    remainingAmount: number | null
    prepaidAmount: number | null
  }

  export type PaymentTrackerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    welfareProgramId: string | null
    cycleStart: Date | null
    cycleEnd: Date | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentId: string | null
    remainingAmount: number | null
    prepaidAmount: number | null
  }

  export type PaymentTrackerCountAggregateOutputType = {
    id: number
    userId: number
    welfareProgramId: number
    cycleStart: number
    cycleEnd: number
    paymentStatus: number
    paymentId: number
    remainingAmount: number
    prepaidAmount: number
    _all: number
  }


  export type PaymentTrackerAvgAggregateInputType = {
    remainingAmount?: true
    prepaidAmount?: true
  }

  export type PaymentTrackerSumAggregateInputType = {
    remainingAmount?: true
    prepaidAmount?: true
  }

  export type PaymentTrackerMinAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    cycleStart?: true
    cycleEnd?: true
    paymentStatus?: true
    paymentId?: true
    remainingAmount?: true
    prepaidAmount?: true
  }

  export type PaymentTrackerMaxAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    cycleStart?: true
    cycleEnd?: true
    paymentStatus?: true
    paymentId?: true
    remainingAmount?: true
    prepaidAmount?: true
  }

  export type PaymentTrackerCountAggregateInputType = {
    id?: true
    userId?: true
    welfareProgramId?: true
    cycleStart?: true
    cycleEnd?: true
    paymentStatus?: true
    paymentId?: true
    remainingAmount?: true
    prepaidAmount?: true
    _all?: true
  }

  export type PaymentTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTracker to aggregate.
     */
    where?: PaymentTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTrackers to fetch.
     */
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentTrackers
    **/
    _count?: true | PaymentTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentTrackerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentTrackerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentTrackerMaxAggregateInputType
  }

  export type GetPaymentTrackerAggregateType<T extends PaymentTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentTracker[P]>
      : GetScalarType<T[P], AggregatePaymentTracker[P]>
  }




  export type PaymentTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTrackerWhereInput
    orderBy?: PaymentTrackerOrderByWithAggregationInput | PaymentTrackerOrderByWithAggregationInput[]
    by: PaymentTrackerScalarFieldEnum[] | PaymentTrackerScalarFieldEnum
    having?: PaymentTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentTrackerCountAggregateInputType | true
    _avg?: PaymentTrackerAvgAggregateInputType
    _sum?: PaymentTrackerSumAggregateInputType
    _min?: PaymentTrackerMinAggregateInputType
    _max?: PaymentTrackerMaxAggregateInputType
  }

  export type PaymentTrackerGroupByOutputType = {
    id: string
    userId: string
    welfareProgramId: string
    cycleStart: Date
    cycleEnd: Date
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount: number
    prepaidAmount: number
    _count: PaymentTrackerCountAggregateOutputType | null
    _avg: PaymentTrackerAvgAggregateOutputType | null
    _sum: PaymentTrackerSumAggregateOutputType | null
    _min: PaymentTrackerMinAggregateOutputType | null
    _max: PaymentTrackerMaxAggregateOutputType | null
  }

  type GetPaymentTrackerGroupByPayload<T extends PaymentTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentTrackerGroupByOutputType[P]>
        }
      >
    >


  export type PaymentTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    cycleStart?: boolean
    cycleEnd?: boolean
    paymentStatus?: boolean
    paymentId?: boolean
    remainingAmount?: boolean
    prepaidAmount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTracker"]>

  export type PaymentTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    cycleStart?: boolean
    cycleEnd?: boolean
    paymentStatus?: boolean
    paymentId?: boolean
    remainingAmount?: boolean
    prepaidAmount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTracker"]>

  export type PaymentTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    cycleStart?: boolean
    cycleEnd?: boolean
    paymentStatus?: boolean
    paymentId?: boolean
    remainingAmount?: boolean
    prepaidAmount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTracker"]>

  export type PaymentTrackerSelectScalar = {
    id?: boolean
    userId?: boolean
    welfareProgramId?: boolean
    cycleStart?: boolean
    cycleEnd?: boolean
    paymentStatus?: boolean
    paymentId?: boolean
    remainingAmount?: boolean
    prepaidAmount?: boolean
  }

  export type PaymentTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "welfareProgramId" | "cycleStart" | "cycleEnd" | "paymentStatus" | "paymentId" | "remainingAmount" | "prepaidAmount", ExtArgs["result"]["paymentTracker"]>
  export type PaymentTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }
  export type PaymentTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }
  export type PaymentTrackerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }

  export type $PaymentTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentTracker"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      welfareProgram: Prisma.$WelfareProgramPayload<ExtArgs>
      payment: Prisma.$PaymentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      welfareProgramId: string
      cycleStart: Date
      cycleEnd: Date
      paymentStatus: $Enums.PaymentStatus
      paymentId: string
      remainingAmount: number
      prepaidAmount: number
    }, ExtArgs["result"]["paymentTracker"]>
    composites: {}
  }

  type PaymentTrackerGetPayload<S extends boolean | null | undefined | PaymentTrackerDefaultArgs> = $Result.GetResult<Prisma.$PaymentTrackerPayload, S>

  type PaymentTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentTrackerCountAggregateInputType | true
    }

  export interface PaymentTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTracker'], meta: { name: 'PaymentTracker' } }
    /**
     * Find zero or one PaymentTracker that matches the filter.
     * @param {PaymentTrackerFindUniqueArgs} args - Arguments to find a PaymentTracker
     * @example
     * // Get one PaymentTracker
     * const paymentTracker = await prisma.paymentTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentTrackerFindUniqueArgs>(args: SelectSubset<T, PaymentTrackerFindUniqueArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PaymentTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentTrackerFindUniqueOrThrowArgs} args - Arguments to find a PaymentTracker
     * @example
     * // Get one PaymentTracker
     * const paymentTracker = await prisma.paymentTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PaymentTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerFindFirstArgs} args - Arguments to find a PaymentTracker
     * @example
     * // Get one PaymentTracker
     * const paymentTracker = await prisma.paymentTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentTrackerFindFirstArgs>(args?: SelectSubset<T, PaymentTrackerFindFirstArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PaymentTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerFindFirstOrThrowArgs} args - Arguments to find a PaymentTracker
     * @example
     * // Get one PaymentTracker
     * const paymentTracker = await prisma.paymentTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PaymentTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentTrackers
     * const paymentTrackers = await prisma.paymentTracker.findMany()
     * 
     * // Get first 10 PaymentTrackers
     * const paymentTrackers = await prisma.paymentTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentTrackerWithIdOnly = await prisma.paymentTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentTrackerFindManyArgs>(args?: SelectSubset<T, PaymentTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PaymentTracker.
     * @param {PaymentTrackerCreateArgs} args - Arguments to create a PaymentTracker.
     * @example
     * // Create one PaymentTracker
     * const PaymentTracker = await prisma.paymentTracker.create({
     *   data: {
     *     // ... data to create a PaymentTracker
     *   }
     * })
     * 
     */
    create<T extends PaymentTrackerCreateArgs>(args: SelectSubset<T, PaymentTrackerCreateArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PaymentTrackers.
     * @param {PaymentTrackerCreateManyArgs} args - Arguments to create many PaymentTrackers.
     * @example
     * // Create many PaymentTrackers
     * const paymentTracker = await prisma.paymentTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentTrackerCreateManyArgs>(args?: SelectSubset<T, PaymentTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentTrackers and returns the data saved in the database.
     * @param {PaymentTrackerCreateManyAndReturnArgs} args - Arguments to create many PaymentTrackers.
     * @example
     * // Create many PaymentTrackers
     * const paymentTracker = await prisma.paymentTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentTrackers and only return the `id`
     * const paymentTrackerWithIdOnly = await prisma.paymentTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PaymentTracker.
     * @param {PaymentTrackerDeleteArgs} args - Arguments to delete one PaymentTracker.
     * @example
     * // Delete one PaymentTracker
     * const PaymentTracker = await prisma.paymentTracker.delete({
     *   where: {
     *     // ... filter to delete one PaymentTracker
     *   }
     * })
     * 
     */
    delete<T extends PaymentTrackerDeleteArgs>(args: SelectSubset<T, PaymentTrackerDeleteArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PaymentTracker.
     * @param {PaymentTrackerUpdateArgs} args - Arguments to update one PaymentTracker.
     * @example
     * // Update one PaymentTracker
     * const paymentTracker = await prisma.paymentTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentTrackerUpdateArgs>(args: SelectSubset<T, PaymentTrackerUpdateArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PaymentTrackers.
     * @param {PaymentTrackerDeleteManyArgs} args - Arguments to filter PaymentTrackers to delete.
     * @example
     * // Delete a few PaymentTrackers
     * const { count } = await prisma.paymentTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentTrackerDeleteManyArgs>(args?: SelectSubset<T, PaymentTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentTrackers
     * const paymentTracker = await prisma.paymentTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentTrackerUpdateManyArgs>(args: SelectSubset<T, PaymentTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTrackers and returns the data updated in the database.
     * @param {PaymentTrackerUpdateManyAndReturnArgs} args - Arguments to update many PaymentTrackers.
     * @example
     * // Update many PaymentTrackers
     * const paymentTracker = await prisma.paymentTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentTrackers and only return the `id`
     * const paymentTrackerWithIdOnly = await prisma.paymentTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PaymentTracker.
     * @param {PaymentTrackerUpsertArgs} args - Arguments to update or create a PaymentTracker.
     * @example
     * // Update or create a PaymentTracker
     * const paymentTracker = await prisma.paymentTracker.upsert({
     *   create: {
     *     // ... data to create a PaymentTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentTracker we want to update
     *   }
     * })
     */
    upsert<T extends PaymentTrackerUpsertArgs>(args: SelectSubset<T, PaymentTrackerUpsertArgs<ExtArgs>>): Prisma__PaymentTrackerClient<$Result.GetResult<Prisma.$PaymentTrackerPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PaymentTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerCountArgs} args - Arguments to filter PaymentTrackers to count.
     * @example
     * // Count the number of PaymentTrackers
     * const count = await prisma.paymentTracker.count({
     *   where: {
     *     // ... the filter for the PaymentTrackers we want to count
     *   }
     * })
    **/
    count<T extends PaymentTrackerCountArgs>(
      args?: Subset<T, PaymentTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentTrackerAggregateArgs>(args: Subset<T, PaymentTrackerAggregateArgs>): Prisma.PrismaPromise<GetPaymentTrackerAggregateType<T>>

    /**
     * Group by PaymentTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentTrackerGroupByArgs['orderBy'] }
        : { orderBy?: PaymentTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentTracker model
   */
  readonly fields: PaymentTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    welfareProgram<T extends WelfareProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgramDefaultArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    payment<T extends PaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentDefaultArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentTracker model
   */ 
  interface PaymentTrackerFieldRefs {
    readonly id: FieldRef<"PaymentTracker", 'String'>
    readonly userId: FieldRef<"PaymentTracker", 'String'>
    readonly welfareProgramId: FieldRef<"PaymentTracker", 'String'>
    readonly cycleStart: FieldRef<"PaymentTracker", 'DateTime'>
    readonly cycleEnd: FieldRef<"PaymentTracker", 'DateTime'>
    readonly paymentStatus: FieldRef<"PaymentTracker", 'PaymentStatus'>
    readonly paymentId: FieldRef<"PaymentTracker", 'String'>
    readonly remainingAmount: FieldRef<"PaymentTracker", 'Float'>
    readonly prepaidAmount: FieldRef<"PaymentTracker", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PaymentTracker findUnique
   */
  export type PaymentTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTracker to fetch.
     */
    where: PaymentTrackerWhereUniqueInput
  }

  /**
   * PaymentTracker findUniqueOrThrow
   */
  export type PaymentTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTracker to fetch.
     */
    where: PaymentTrackerWhereUniqueInput
  }

  /**
   * PaymentTracker findFirst
   */
  export type PaymentTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTracker to fetch.
     */
    where?: PaymentTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTrackers to fetch.
     */
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTrackers.
     */
    cursor?: PaymentTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTrackers.
     */
    distinct?: PaymentTrackerScalarFieldEnum | PaymentTrackerScalarFieldEnum[]
  }

  /**
   * PaymentTracker findFirstOrThrow
   */
  export type PaymentTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTracker to fetch.
     */
    where?: PaymentTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTrackers to fetch.
     */
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTrackers.
     */
    cursor?: PaymentTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTrackers.
     */
    distinct?: PaymentTrackerScalarFieldEnum | PaymentTrackerScalarFieldEnum[]
  }

  /**
   * PaymentTracker findMany
   */
  export type PaymentTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTrackers to fetch.
     */
    where?: PaymentTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTrackers to fetch.
     */
    orderBy?: PaymentTrackerOrderByWithRelationInput | PaymentTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentTrackers.
     */
    cursor?: PaymentTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTrackers.
     */
    skip?: number
    distinct?: PaymentTrackerScalarFieldEnum | PaymentTrackerScalarFieldEnum[]
  }

  /**
   * PaymentTracker create
   */
  export type PaymentTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentTracker.
     */
    data: XOR<PaymentTrackerCreateInput, PaymentTrackerUncheckedCreateInput>
  }

  /**
   * PaymentTracker createMany
   */
  export type PaymentTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentTrackers.
     */
    data: PaymentTrackerCreateManyInput | PaymentTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentTracker createManyAndReturn
   */
  export type PaymentTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentTrackers.
     */
    data: PaymentTrackerCreateManyInput | PaymentTrackerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentTracker update
   */
  export type PaymentTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentTracker.
     */
    data: XOR<PaymentTrackerUpdateInput, PaymentTrackerUncheckedUpdateInput>
    /**
     * Choose, which PaymentTracker to update.
     */
    where: PaymentTrackerWhereUniqueInput
  }

  /**
   * PaymentTracker updateMany
   */
  export type PaymentTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentTrackers.
     */
    data: XOR<PaymentTrackerUpdateManyMutationInput, PaymentTrackerUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTrackers to update
     */
    where?: PaymentTrackerWhereInput
  }

  /**
   * PaymentTracker updateManyAndReturn
   */
  export type PaymentTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * The data used to update PaymentTrackers.
     */
    data: XOR<PaymentTrackerUpdateManyMutationInput, PaymentTrackerUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTrackers to update
     */
    where?: PaymentTrackerWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentTracker upsert
   */
  export type PaymentTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentTracker to update in case it exists.
     */
    where: PaymentTrackerWhereUniqueInput
    /**
     * In case the PaymentTracker found by the `where` argument doesn't exist, create a new PaymentTracker with this data.
     */
    create: XOR<PaymentTrackerCreateInput, PaymentTrackerUncheckedCreateInput>
    /**
     * In case the PaymentTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentTrackerUpdateInput, PaymentTrackerUncheckedUpdateInput>
  }

  /**
   * PaymentTracker delete
   */
  export type PaymentTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
    /**
     * Filter which PaymentTracker to delete.
     */
    where: PaymentTrackerWhereUniqueInput
  }

  /**
   * PaymentTracker deleteMany
   */
  export type PaymentTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTrackers to delete
     */
    where?: PaymentTrackerWhereInput
  }

  /**
   * PaymentTracker without action
   */
  export type PaymentTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTracker
     */
    select?: PaymentTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTracker
     */
    omit?: PaymentTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTrackerInclude<ExtArgs> | null
  }


  /**
   * Model Expense
   */

  export type AggregateExpense = {
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  export type ExpenseAvgAggregateOutputType = {
    amount: number | null
  }

  export type ExpenseSumAggregateOutputType = {
    amount: number | null
  }

  export type ExpenseMinAggregateOutputType = {
    id: string | null
    description: string | null
    amount: number | null
    welfareProgramId: string | null
    recordedAt: Date | null
    recordedBy: string | null
  }

  export type ExpenseMaxAggregateOutputType = {
    id: string | null
    description: string | null
    amount: number | null
    welfareProgramId: string | null
    recordedAt: Date | null
    recordedBy: string | null
  }

  export type ExpenseCountAggregateOutputType = {
    id: number
    description: number
    amount: number
    welfareProgramId: number
    recordedAt: number
    recordedBy: number
    _all: number
  }


  export type ExpenseAvgAggregateInputType = {
    amount?: true
  }

  export type ExpenseSumAggregateInputType = {
    amount?: true
  }

  export type ExpenseMinAggregateInputType = {
    id?: true
    description?: true
    amount?: true
    welfareProgramId?: true
    recordedAt?: true
    recordedBy?: true
  }

  export type ExpenseMaxAggregateInputType = {
    id?: true
    description?: true
    amount?: true
    welfareProgramId?: true
    recordedAt?: true
    recordedBy?: true
  }

  export type ExpenseCountAggregateInputType = {
    id?: true
    description?: true
    amount?: true
    welfareProgramId?: true
    recordedAt?: true
    recordedBy?: true
    _all?: true
  }

  export type ExpenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expense to aggregate.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expenses
    **/
    _count?: true | ExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseMaxAggregateInputType
  }

  export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense[P]>
      : GetScalarType<T[P], AggregateExpense[P]>
  }




  export type ExpenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithAggregationInput | ExpenseOrderByWithAggregationInput[]
    by: ExpenseScalarFieldEnum[] | ExpenseScalarFieldEnum
    having?: ExpenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseCountAggregateInputType | true
    _avg?: ExpenseAvgAggregateInputType
    _sum?: ExpenseSumAggregateInputType
    _min?: ExpenseMinAggregateInputType
    _max?: ExpenseMaxAggregateInputType
  }

  export type ExpenseGroupByOutputType = {
    id: string
    description: string
    amount: number
    welfareProgramId: string
    recordedAt: Date
    recordedBy: string
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  type GetExpenseGroupByPayload<T extends ExpenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    amount?: boolean
    welfareProgramId?: boolean
    recordedAt?: boolean
    recordedBy?: boolean
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>

  export type ExpenseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    amount?: boolean
    welfareProgramId?: boolean
    recordedAt?: boolean
    recordedBy?: boolean
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>

  export type ExpenseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    amount?: boolean
    welfareProgramId?: boolean
    recordedAt?: boolean
    recordedBy?: boolean
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>

  export type ExpenseSelectScalar = {
    id?: boolean
    description?: boolean
    amount?: boolean
    welfareProgramId?: boolean
    recordedAt?: boolean
    recordedBy?: boolean
  }

  export type ExpenseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "amount" | "welfareProgramId" | "recordedAt" | "recordedBy", ExtArgs["result"]["expense"]>
  export type ExpenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }
  export type ExpenseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }
  export type ExpenseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    welfareProgram?: boolean | WelfareProgramDefaultArgs<ExtArgs>
  }

  export type $ExpensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Expense"
    objects: {
      welfareProgram: Prisma.$WelfareProgramPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      amount: number
      welfareProgramId: string
      recordedAt: Date
      recordedBy: string
    }, ExtArgs["result"]["expense"]>
    composites: {}
  }

  type ExpenseGetPayload<S extends boolean | null | undefined | ExpenseDefaultArgs> = $Result.GetResult<Prisma.$ExpensePayload, S>

  type ExpenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseCountAggregateInputType | true
    }

  export interface ExpenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expense'], meta: { name: 'Expense' } }
    /**
     * Find zero or one Expense that matches the filter.
     * @param {ExpenseFindUniqueArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpenseFindUniqueArgs>(args: SelectSubset<T, ExpenseFindUniqueArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Expense that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpenseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Expense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpenseFindFirstArgs>(args?: SelectSubset<T, ExpenseFindFirstArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Expense that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpenseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expense.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpenseFindManyArgs>(args?: SelectSubset<T, ExpenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Expense.
     * @param {ExpenseCreateArgs} args - Arguments to create a Expense.
     * @example
     * // Create one Expense
     * const Expense = await prisma.expense.create({
     *   data: {
     *     // ... data to create a Expense
     *   }
     * })
     * 
     */
    create<T extends ExpenseCreateArgs>(args: SelectSubset<T, ExpenseCreateArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Expenses.
     * @param {ExpenseCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpenseCreateManyArgs>(args?: SelectSubset<T, ExpenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Expenses and returns the data saved in the database.
     * @param {ExpenseCreateManyAndReturnArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Expenses and only return the `id`
     * const expenseWithIdOnly = await prisma.expense.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExpenseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExpenseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Expense.
     * @param {ExpenseDeleteArgs} args - Arguments to delete one Expense.
     * @example
     * // Delete one Expense
     * const Expense = await prisma.expense.delete({
     *   where: {
     *     // ... filter to delete one Expense
     *   }
     * })
     * 
     */
    delete<T extends ExpenseDeleteArgs>(args: SelectSubset<T, ExpenseDeleteArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Expense.
     * @param {ExpenseUpdateArgs} args - Arguments to update one Expense.
     * @example
     * // Update one Expense
     * const expense = await prisma.expense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpenseUpdateArgs>(args: SelectSubset<T, ExpenseUpdateArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Expenses.
     * @param {ExpenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpenseDeleteManyArgs>(args?: SelectSubset<T, ExpenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpenseUpdateManyArgs>(args: SelectSubset<T, ExpenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses and returns the data updated in the database.
     * @param {ExpenseUpdateManyAndReturnArgs} args - Arguments to update many Expenses.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Expenses and only return the `id`
     * const expenseWithIdOnly = await prisma.expense.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExpenseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExpenseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Expense.
     * @param {ExpenseUpsertArgs} args - Arguments to update or create a Expense.
     * @example
     * // Update or create a Expense
     * const expense = await prisma.expense.upsert({
     *   create: {
     *     // ... data to create a Expense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense we want to update
     *   }
     * })
     */
    upsert<T extends ExpenseUpsertArgs>(args: SelectSubset<T, ExpenseUpsertArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expense.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends ExpenseCountArgs>(
      args?: Subset<T, ExpenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseAggregateArgs>(args: Subset<T, ExpenseAggregateArgs>): Prisma.PrismaPromise<GetExpenseAggregateType<T>>

    /**
     * Group by Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Expense model
   */
  readonly fields: ExpenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Expense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    welfareProgram<T extends WelfareProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WelfareProgramDefaultArgs<ExtArgs>>): Prisma__WelfareProgramClient<$Result.GetResult<Prisma.$WelfareProgramPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Expense model
   */ 
  interface ExpenseFieldRefs {
    readonly id: FieldRef<"Expense", 'String'>
    readonly description: FieldRef<"Expense", 'String'>
    readonly amount: FieldRef<"Expense", 'Float'>
    readonly welfareProgramId: FieldRef<"Expense", 'String'>
    readonly recordedAt: FieldRef<"Expense", 'DateTime'>
    readonly recordedBy: FieldRef<"Expense", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Expense findUnique
   */
  export type ExpenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense findUniqueOrThrow
   */
  export type ExpenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense findFirst
   */
  export type ExpenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense findFirstOrThrow
   */
  export type ExpenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense findMany
   */
  export type ExpenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense create
   */
  export type ExpenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The data needed to create a Expense.
     */
    data: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
  }

  /**
   * Expense createMany
   */
  export type ExpenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Expenses.
     */
    data: ExpenseCreateManyInput | ExpenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Expense createManyAndReturn
   */
  export type ExpenseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * The data used to create many Expenses.
     */
    data: ExpenseCreateManyInput | ExpenseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Expense update
   */
  export type ExpenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The data needed to update a Expense.
     */
    data: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
    /**
     * Choose, which Expense to update.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense updateMany
   */
  export type ExpenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpenseWhereInput
  }

  /**
   * Expense updateManyAndReturn
   */
  export type ExpenseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpenseWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Expense upsert
   */
  export type ExpenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The filter to search for the Expense to update in case it exists.
     */
    where: ExpenseWhereUniqueInput
    /**
     * In case the Expense found by the `where` argument doesn't exist, create a new Expense with this data.
     */
    create: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
    /**
     * In case the Expense was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
  }

  /**
   * Expense delete
   */
  export type ExpenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter which Expense to delete.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense deleteMany
   */
  export type ExpenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to delete
     */
    where?: ExpenseWhereInput
  }

  /**
   * Expense without action
   */
  export type ExpenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
  }


  /**
   * Model Analytics
   */

  export type AggregateAnalytics = {
    _count: AnalyticsCountAggregateOutputType | null
    _avg: AnalyticsAvgAggregateOutputType | null
    _sum: AnalyticsSumAggregateOutputType | null
    _min: AnalyticsMinAggregateOutputType | null
    _max: AnalyticsMaxAggregateOutputType | null
  }

  export type AnalyticsAvgAggregateOutputType = {
    totalMembers: number | null
    totalRevenue: number | null
  }

  export type AnalyticsSumAggregateOutputType = {
    totalMembers: number | null
    totalRevenue: number | null
  }

  export type AnalyticsMinAggregateOutputType = {
    id: string | null
    totalMembers: number | null
    totalRevenue: number | null
  }

  export type AnalyticsMaxAggregateOutputType = {
    id: string | null
    totalMembers: number | null
    totalRevenue: number | null
  }

  export type AnalyticsCountAggregateOutputType = {
    id: number
    totalMembers: number
    totalRevenue: number
    recentPayments: number
    monthlyPayments: number
    weeklyPayments: number
    dailyPayments: number
    _all: number
  }


  export type AnalyticsAvgAggregateInputType = {
    totalMembers?: true
    totalRevenue?: true
  }

  export type AnalyticsSumAggregateInputType = {
    totalMembers?: true
    totalRevenue?: true
  }

  export type AnalyticsMinAggregateInputType = {
    id?: true
    totalMembers?: true
    totalRevenue?: true
  }

  export type AnalyticsMaxAggregateInputType = {
    id?: true
    totalMembers?: true
    totalRevenue?: true
  }

  export type AnalyticsCountAggregateInputType = {
    id?: true
    totalMembers?: true
    totalRevenue?: true
    recentPayments?: true
    monthlyPayments?: true
    weeklyPayments?: true
    dailyPayments?: true
    _all?: true
  }

  export type AnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Analytics to aggregate.
     */
    where?: AnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analytics to fetch.
     */
    orderBy?: AnalyticsOrderByWithRelationInput | AnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Analytics
    **/
    _count?: true | AnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalyticsMaxAggregateInputType
  }

  export type GetAnalyticsAggregateType<T extends AnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalytics[P]>
      : GetScalarType<T[P], AggregateAnalytics[P]>
  }




  export type AnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsWhereInput
    orderBy?: AnalyticsOrderByWithAggregationInput | AnalyticsOrderByWithAggregationInput[]
    by: AnalyticsScalarFieldEnum[] | AnalyticsScalarFieldEnum
    having?: AnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalyticsCountAggregateInputType | true
    _avg?: AnalyticsAvgAggregateInputType
    _sum?: AnalyticsSumAggregateInputType
    _min?: AnalyticsMinAggregateInputType
    _max?: AnalyticsMaxAggregateInputType
  }

  export type AnalyticsGroupByOutputType = {
    id: string
    totalMembers: number
    totalRevenue: number
    recentPayments: JsonValue
    monthlyPayments: JsonValue
    weeklyPayments: JsonValue
    dailyPayments: JsonValue
    _count: AnalyticsCountAggregateOutputType | null
    _avg: AnalyticsAvgAggregateOutputType | null
    _sum: AnalyticsSumAggregateOutputType | null
    _min: AnalyticsMinAggregateOutputType | null
    _max: AnalyticsMaxAggregateOutputType | null
  }

  type GetAnalyticsGroupByPayload<T extends AnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], AnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type AnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalMembers?: boolean
    totalRevenue?: boolean
    recentPayments?: boolean
    monthlyPayments?: boolean
    weeklyPayments?: boolean
    dailyPayments?: boolean
  }, ExtArgs["result"]["analytics"]>

  export type AnalyticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalMembers?: boolean
    totalRevenue?: boolean
    recentPayments?: boolean
    monthlyPayments?: boolean
    weeklyPayments?: boolean
    dailyPayments?: boolean
  }, ExtArgs["result"]["analytics"]>

  export type AnalyticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalMembers?: boolean
    totalRevenue?: boolean
    recentPayments?: boolean
    monthlyPayments?: boolean
    weeklyPayments?: boolean
    dailyPayments?: boolean
  }, ExtArgs["result"]["analytics"]>

  export type AnalyticsSelectScalar = {
    id?: boolean
    totalMembers?: boolean
    totalRevenue?: boolean
    recentPayments?: boolean
    monthlyPayments?: boolean
    weeklyPayments?: boolean
    dailyPayments?: boolean
  }

  export type AnalyticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "totalMembers" | "totalRevenue" | "recentPayments" | "monthlyPayments" | "weeklyPayments" | "dailyPayments", ExtArgs["result"]["analytics"]>

  export type $AnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Analytics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      totalMembers: number
      totalRevenue: number
      recentPayments: Prisma.JsonValue
      monthlyPayments: Prisma.JsonValue
      weeklyPayments: Prisma.JsonValue
      dailyPayments: Prisma.JsonValue
    }, ExtArgs["result"]["analytics"]>
    composites: {}
  }

  type AnalyticsGetPayload<S extends boolean | null | undefined | AnalyticsDefaultArgs> = $Result.GetResult<Prisma.$AnalyticsPayload, S>

  type AnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnalyticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnalyticsCountAggregateInputType | true
    }

  export interface AnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Analytics'], meta: { name: 'Analytics' } }
    /**
     * Find zero or one Analytics that matches the filter.
     * @param {AnalyticsFindUniqueArgs} args - Arguments to find a Analytics
     * @example
     * // Get one Analytics
     * const analytics = await prisma.analytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnalyticsFindUniqueArgs>(args: SelectSubset<T, AnalyticsFindUniqueArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Analytics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnalyticsFindUniqueOrThrowArgs} args - Arguments to find a Analytics
     * @example
     * // Get one Analytics
     * const analytics = await prisma.analytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, AnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Analytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsFindFirstArgs} args - Arguments to find a Analytics
     * @example
     * // Get one Analytics
     * const analytics = await prisma.analytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnalyticsFindFirstArgs>(args?: SelectSubset<T, AnalyticsFindFirstArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Analytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsFindFirstOrThrowArgs} args - Arguments to find a Analytics
     * @example
     * // Get one Analytics
     * const analytics = await prisma.analytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, AnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Analytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Analytics
     * const analytics = await prisma.analytics.findMany()
     * 
     * // Get first 10 Analytics
     * const analytics = await prisma.analytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analyticsWithIdOnly = await prisma.analytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnalyticsFindManyArgs>(args?: SelectSubset<T, AnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Analytics.
     * @param {AnalyticsCreateArgs} args - Arguments to create a Analytics.
     * @example
     * // Create one Analytics
     * const Analytics = await prisma.analytics.create({
     *   data: {
     *     // ... data to create a Analytics
     *   }
     * })
     * 
     */
    create<T extends AnalyticsCreateArgs>(args: SelectSubset<T, AnalyticsCreateArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Analytics.
     * @param {AnalyticsCreateManyArgs} args - Arguments to create many Analytics.
     * @example
     * // Create many Analytics
     * const analytics = await prisma.analytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnalyticsCreateManyArgs>(args?: SelectSubset<T, AnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Analytics and returns the data saved in the database.
     * @param {AnalyticsCreateManyAndReturnArgs} args - Arguments to create many Analytics.
     * @example
     * // Create many Analytics
     * const analytics = await prisma.analytics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Analytics and only return the `id`
     * const analyticsWithIdOnly = await prisma.analytics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnalyticsCreateManyAndReturnArgs>(args?: SelectSubset<T, AnalyticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Analytics.
     * @param {AnalyticsDeleteArgs} args - Arguments to delete one Analytics.
     * @example
     * // Delete one Analytics
     * const Analytics = await prisma.analytics.delete({
     *   where: {
     *     // ... filter to delete one Analytics
     *   }
     * })
     * 
     */
    delete<T extends AnalyticsDeleteArgs>(args: SelectSubset<T, AnalyticsDeleteArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Analytics.
     * @param {AnalyticsUpdateArgs} args - Arguments to update one Analytics.
     * @example
     * // Update one Analytics
     * const analytics = await prisma.analytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnalyticsUpdateArgs>(args: SelectSubset<T, AnalyticsUpdateArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Analytics.
     * @param {AnalyticsDeleteManyArgs} args - Arguments to filter Analytics to delete.
     * @example
     * // Delete a few Analytics
     * const { count } = await prisma.analytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnalyticsDeleteManyArgs>(args?: SelectSubset<T, AnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Analytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Analytics
     * const analytics = await prisma.analytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnalyticsUpdateManyArgs>(args: SelectSubset<T, AnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Analytics and returns the data updated in the database.
     * @param {AnalyticsUpdateManyAndReturnArgs} args - Arguments to update many Analytics.
     * @example
     * // Update many Analytics
     * const analytics = await prisma.analytics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Analytics and only return the `id`
     * const analyticsWithIdOnly = await prisma.analytics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnalyticsUpdateManyAndReturnArgs>(args: SelectSubset<T, AnalyticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Analytics.
     * @param {AnalyticsUpsertArgs} args - Arguments to update or create a Analytics.
     * @example
     * // Update or create a Analytics
     * const analytics = await prisma.analytics.upsert({
     *   create: {
     *     // ... data to create a Analytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Analytics we want to update
     *   }
     * })
     */
    upsert<T extends AnalyticsUpsertArgs>(args: SelectSubset<T, AnalyticsUpsertArgs<ExtArgs>>): Prisma__AnalyticsClient<$Result.GetResult<Prisma.$AnalyticsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Analytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsCountArgs} args - Arguments to filter Analytics to count.
     * @example
     * // Count the number of Analytics
     * const count = await prisma.analytics.count({
     *   where: {
     *     // ... the filter for the Analytics we want to count
     *   }
     * })
    **/
    count<T extends AnalyticsCountArgs>(
      args?: Subset<T, AnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Analytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalyticsAggregateArgs>(args: Subset<T, AnalyticsAggregateArgs>): Prisma.PrismaPromise<GetAnalyticsAggregateType<T>>

    /**
     * Group by Analytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: AnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Analytics model
   */
  readonly fields: AnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Analytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Analytics model
   */ 
  interface AnalyticsFieldRefs {
    readonly id: FieldRef<"Analytics", 'String'>
    readonly totalMembers: FieldRef<"Analytics", 'Int'>
    readonly totalRevenue: FieldRef<"Analytics", 'Float'>
    readonly recentPayments: FieldRef<"Analytics", 'Json'>
    readonly monthlyPayments: FieldRef<"Analytics", 'Json'>
    readonly weeklyPayments: FieldRef<"Analytics", 'Json'>
    readonly dailyPayments: FieldRef<"Analytics", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Analytics findUnique
   */
  export type AnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * Filter, which Analytics to fetch.
     */
    where: AnalyticsWhereUniqueInput
  }

  /**
   * Analytics findUniqueOrThrow
   */
  export type AnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * Filter, which Analytics to fetch.
     */
    where: AnalyticsWhereUniqueInput
  }

  /**
   * Analytics findFirst
   */
  export type AnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * Filter, which Analytics to fetch.
     */
    where?: AnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analytics to fetch.
     */
    orderBy?: AnalyticsOrderByWithRelationInput | AnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Analytics.
     */
    cursor?: AnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Analytics.
     */
    distinct?: AnalyticsScalarFieldEnum | AnalyticsScalarFieldEnum[]
  }

  /**
   * Analytics findFirstOrThrow
   */
  export type AnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * Filter, which Analytics to fetch.
     */
    where?: AnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analytics to fetch.
     */
    orderBy?: AnalyticsOrderByWithRelationInput | AnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Analytics.
     */
    cursor?: AnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Analytics.
     */
    distinct?: AnalyticsScalarFieldEnum | AnalyticsScalarFieldEnum[]
  }

  /**
   * Analytics findMany
   */
  export type AnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * Filter, which Analytics to fetch.
     */
    where?: AnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Analytics to fetch.
     */
    orderBy?: AnalyticsOrderByWithRelationInput | AnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Analytics.
     */
    cursor?: AnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Analytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Analytics.
     */
    skip?: number
    distinct?: AnalyticsScalarFieldEnum | AnalyticsScalarFieldEnum[]
  }

  /**
   * Analytics create
   */
  export type AnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * The data needed to create a Analytics.
     */
    data: XOR<AnalyticsCreateInput, AnalyticsUncheckedCreateInput>
  }

  /**
   * Analytics createMany
   */
  export type AnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Analytics.
     */
    data: AnalyticsCreateManyInput | AnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Analytics createManyAndReturn
   */
  export type AnalyticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * The data used to create many Analytics.
     */
    data: AnalyticsCreateManyInput | AnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Analytics update
   */
  export type AnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * The data needed to update a Analytics.
     */
    data: XOR<AnalyticsUpdateInput, AnalyticsUncheckedUpdateInput>
    /**
     * Choose, which Analytics to update.
     */
    where: AnalyticsWhereUniqueInput
  }

  /**
   * Analytics updateMany
   */
  export type AnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Analytics.
     */
    data: XOR<AnalyticsUpdateManyMutationInput, AnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which Analytics to update
     */
    where?: AnalyticsWhereInput
  }

  /**
   * Analytics updateManyAndReturn
   */
  export type AnalyticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * The data used to update Analytics.
     */
    data: XOR<AnalyticsUpdateManyMutationInput, AnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which Analytics to update
     */
    where?: AnalyticsWhereInput
  }

  /**
   * Analytics upsert
   */
  export type AnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * The filter to search for the Analytics to update in case it exists.
     */
    where: AnalyticsWhereUniqueInput
    /**
     * In case the Analytics found by the `where` argument doesn't exist, create a new Analytics with this data.
     */
    create: XOR<AnalyticsCreateInput, AnalyticsUncheckedCreateInput>
    /**
     * In case the Analytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalyticsUpdateInput, AnalyticsUncheckedUpdateInput>
  }

  /**
   * Analytics delete
   */
  export type AnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
    /**
     * Filter which Analytics to delete.
     */
    where: AnalyticsWhereUniqueInput
  }

  /**
   * Analytics deleteMany
   */
  export type AnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Analytics to delete
     */
    where?: AnalyticsWhereInput
  }

  /**
   * Analytics without action
   */
  export type AnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Analytics
     */
    select?: AnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Analytics
     */
    omit?: AnalyticsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phoneNumber: 'phoneNumber',
    password: 'password',
    role: 'role',
    registeredAt: 'registeredAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WelfareProgramScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    amount: 'amount',
    expectedAmount: 'expectedAmount',
    paymentCycle: 'paymentCycle',
    createdBy: 'createdBy',
    createdAt: 'createdAt'
  };

  export type WelfareProgramScalarFieldEnum = (typeof WelfareProgramScalarFieldEnum)[keyof typeof WelfareProgramScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    welfareProgramId: 'welfareProgramId',
    status: 'status',
    enrolledAt: 'enrolledAt'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    welfareProgramId: 'welfareProgramId',
    amount: 'amount',
    paymentDate: 'paymentDate',
    paymentMode: 'paymentMode',
    receiptNumber: 'receiptNumber',
    paystackreference: 'paystackreference',
    access_code: 'access_code',
    status: 'status'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const PaymentTrackerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    welfareProgramId: 'welfareProgramId',
    cycleStart: 'cycleStart',
    cycleEnd: 'cycleEnd',
    paymentStatus: 'paymentStatus',
    paymentId: 'paymentId',
    remainingAmount: 'remainingAmount',
    prepaidAmount: 'prepaidAmount'
  };

  export type PaymentTrackerScalarFieldEnum = (typeof PaymentTrackerScalarFieldEnum)[keyof typeof PaymentTrackerScalarFieldEnum]


  export const ExpenseScalarFieldEnum: {
    id: 'id',
    description: 'description',
    amount: 'amount',
    welfareProgramId: 'welfareProgramId',
    recordedAt: 'recordedAt',
    recordedBy: 'recordedBy'
  };

  export type ExpenseScalarFieldEnum = (typeof ExpenseScalarFieldEnum)[keyof typeof ExpenseScalarFieldEnum]


  export const AnalyticsScalarFieldEnum: {
    id: 'id',
    totalMembers: 'totalMembers',
    totalRevenue: 'totalRevenue',
    recentPayments: 'recentPayments',
    monthlyPayments: 'monthlyPayments',
    weeklyPayments: 'weeklyPayments',
    dailyPayments: 'dailyPayments'
  };

  export type AnalyticsScalarFieldEnum = (typeof AnalyticsScalarFieldEnum)[keyof typeof AnalyticsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentCycle'
   */
  export type EnumPaymentCycleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentCycle'>
    


  /**
   * Reference to a field of type 'PaymentCycle[]'
   */
  export type ListEnumPaymentCycleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentCycle[]'>
    


  /**
   * Reference to a field of type 'EnrollmentStatus'
   */
  export type EnumEnrollmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnrollmentStatus'>
    


  /**
   * Reference to a field of type 'EnrollmentStatus[]'
   */
  export type ListEnumEnrollmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnrollmentStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMode'
   */
  export type EnumPaymentModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMode'>
    


  /**
   * Reference to a field of type 'PaymentMode[]'
   */
  export type ListEnumPaymentModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMode[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    registeredAt?: DateTimeFilter<"User"> | Date | string
    enrollments?: EnrollmentListRelationFilter
    payments?: PaymentListRelationFilter
    paymentTrackers?: PaymentTrackerListRelationFilter
    WelfarePrograms?: WelfareProgramListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    registeredAt?: SortOrder
    enrollments?: EnrollmentOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    paymentTrackers?: PaymentTrackerOrderByRelationAggregateInput
    WelfarePrograms?: WelfareProgramOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    registeredAt?: DateTimeFilter<"User"> | Date | string
    enrollments?: EnrollmentListRelationFilter
    payments?: PaymentListRelationFilter
    paymentTrackers?: PaymentTrackerListRelationFilter
    WelfarePrograms?: WelfareProgramListRelationFilter
  }, "id" | "email" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    registeredAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    registeredAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WelfareProgramWhereInput = {
    AND?: WelfareProgramWhereInput | WelfareProgramWhereInput[]
    OR?: WelfareProgramWhereInput[]
    NOT?: WelfareProgramWhereInput | WelfareProgramWhereInput[]
    id?: StringFilter<"WelfareProgram"> | string
    name?: StringFilter<"WelfareProgram"> | string
    description?: StringFilter<"WelfareProgram"> | string
    amount?: FloatFilter<"WelfareProgram"> | number
    expectedAmount?: FloatFilter<"WelfareProgram"> | number
    paymentCycle?: EnumPaymentCycleFilter<"WelfareProgram"> | $Enums.PaymentCycle
    createdBy?: StringFilter<"WelfareProgram"> | string
    createdAt?: DateTimeFilter<"WelfareProgram"> | Date | string
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    enrollments?: EnrollmentListRelationFilter
    payments?: PaymentListRelationFilter
    paymentTrackers?: PaymentTrackerListRelationFilter
    expenses?: ExpenseListRelationFilter
  }

  export type WelfareProgramOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    expectedAmount?: SortOrder
    paymentCycle?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    enrollments?: EnrollmentOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    paymentTrackers?: PaymentTrackerOrderByRelationAggregateInput
    expenses?: ExpenseOrderByRelationAggregateInput
  }

  export type WelfareProgramWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: WelfareProgramWhereInput | WelfareProgramWhereInput[]
    OR?: WelfareProgramWhereInput[]
    NOT?: WelfareProgramWhereInput | WelfareProgramWhereInput[]
    description?: StringFilter<"WelfareProgram"> | string
    amount?: FloatFilter<"WelfareProgram"> | number
    expectedAmount?: FloatFilter<"WelfareProgram"> | number
    paymentCycle?: EnumPaymentCycleFilter<"WelfareProgram"> | $Enums.PaymentCycle
    createdBy?: StringFilter<"WelfareProgram"> | string
    createdAt?: DateTimeFilter<"WelfareProgram"> | Date | string
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    enrollments?: EnrollmentListRelationFilter
    payments?: PaymentListRelationFilter
    paymentTrackers?: PaymentTrackerListRelationFilter
    expenses?: ExpenseListRelationFilter
  }, "id" | "name">

  export type WelfareProgramOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    expectedAmount?: SortOrder
    paymentCycle?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    _count?: WelfareProgramCountOrderByAggregateInput
    _avg?: WelfareProgramAvgOrderByAggregateInput
    _max?: WelfareProgramMaxOrderByAggregateInput
    _min?: WelfareProgramMinOrderByAggregateInput
    _sum?: WelfareProgramSumOrderByAggregateInput
  }

  export type WelfareProgramScalarWhereWithAggregatesInput = {
    AND?: WelfareProgramScalarWhereWithAggregatesInput | WelfareProgramScalarWhereWithAggregatesInput[]
    OR?: WelfareProgramScalarWhereWithAggregatesInput[]
    NOT?: WelfareProgramScalarWhereWithAggregatesInput | WelfareProgramScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WelfareProgram"> | string
    name?: StringWithAggregatesFilter<"WelfareProgram"> | string
    description?: StringWithAggregatesFilter<"WelfareProgram"> | string
    amount?: FloatWithAggregatesFilter<"WelfareProgram"> | number
    expectedAmount?: FloatWithAggregatesFilter<"WelfareProgram"> | number
    paymentCycle?: EnumPaymentCycleWithAggregatesFilter<"WelfareProgram"> | $Enums.PaymentCycle
    createdBy?: StringWithAggregatesFilter<"WelfareProgram"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WelfareProgram"> | Date | string
  }

  export type EnrollmentWhereInput = {
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    id?: StringFilter<"Enrollment"> | string
    userId?: StringFilter<"Enrollment"> | string
    welfareProgramId?: StringFilter<"Enrollment"> | string
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFilter<"Enrollment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
  }

  export type EnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    status?: SortOrder
    enrolledAt?: SortOrder
    user?: UserOrderByWithRelationInput
    welfareProgram?: WelfareProgramOrderByWithRelationInput
  }

  export type EnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    userId?: StringFilter<"Enrollment"> | string
    welfareProgramId?: StringFilter<"Enrollment"> | string
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFilter<"Enrollment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
  }, "id">

  export type EnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    status?: SortOrder
    enrolledAt?: SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    OR?: EnrollmentScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Enrollment"> | string
    userId?: StringWithAggregatesFilter<"Enrollment"> | string
    welfareProgramId?: StringWithAggregatesFilter<"Enrollment"> | string
    status?: EnumEnrollmentStatusWithAggregatesFilter<"Enrollment"> | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    userId?: StringFilter<"Payment"> | string
    welfareProgramId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    paymentMode?: EnumPaymentModeFilter<"Payment"> | $Enums.PaymentMode
    receiptNumber?: StringFilter<"Payment"> | string
    paystackreference?: StringNullableFilter<"Payment"> | string | null
    access_code?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusNullableFilter<"Payment"> | $Enums.PaymentStatus | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
    paymentTrackers?: PaymentTrackerListRelationFilter
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMode?: SortOrder
    receiptNumber?: SortOrder
    paystackreference?: SortOrderInput | SortOrder
    access_code?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    welfareProgram?: WelfareProgramOrderByWithRelationInput
    paymentTrackers?: PaymentTrackerOrderByRelationAggregateInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    receiptNumber?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    userId?: StringFilter<"Payment"> | string
    welfareProgramId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    paymentMode?: EnumPaymentModeFilter<"Payment"> | $Enums.PaymentMode
    paystackreference?: StringNullableFilter<"Payment"> | string | null
    access_code?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusNullableFilter<"Payment"> | $Enums.PaymentStatus | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
    paymentTrackers?: PaymentTrackerListRelationFilter
  }, "id" | "receiptNumber">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMode?: SortOrder
    receiptNumber?: SortOrder
    paystackreference?: SortOrderInput | SortOrder
    access_code?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    userId?: StringWithAggregatesFilter<"Payment"> | string
    welfareProgramId?: StringWithAggregatesFilter<"Payment"> | string
    amount?: FloatWithAggregatesFilter<"Payment"> | number
    paymentDate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    paymentMode?: EnumPaymentModeWithAggregatesFilter<"Payment"> | $Enums.PaymentMode
    receiptNumber?: StringWithAggregatesFilter<"Payment"> | string
    paystackreference?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    access_code?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    status?: EnumPaymentStatusNullableWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus | null
  }

  export type PaymentTrackerWhereInput = {
    AND?: PaymentTrackerWhereInput | PaymentTrackerWhereInput[]
    OR?: PaymentTrackerWhereInput[]
    NOT?: PaymentTrackerWhereInput | PaymentTrackerWhereInput[]
    id?: StringFilter<"PaymentTracker"> | string
    userId?: StringFilter<"PaymentTracker"> | string
    welfareProgramId?: StringFilter<"PaymentTracker"> | string
    cycleStart?: DateTimeFilter<"PaymentTracker"> | Date | string
    cycleEnd?: DateTimeFilter<"PaymentTracker"> | Date | string
    paymentStatus?: EnumPaymentStatusFilter<"PaymentTracker"> | $Enums.PaymentStatus
    paymentId?: StringFilter<"PaymentTracker"> | string
    remainingAmount?: FloatFilter<"PaymentTracker"> | number
    prepaidAmount?: FloatFilter<"PaymentTracker"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
  }

  export type PaymentTrackerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    cycleStart?: SortOrder
    cycleEnd?: SortOrder
    paymentStatus?: SortOrder
    paymentId?: SortOrder
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
    user?: UserOrderByWithRelationInput
    welfareProgram?: WelfareProgramOrderByWithRelationInput
    payment?: PaymentOrderByWithRelationInput
  }

  export type PaymentTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentTrackerWhereInput | PaymentTrackerWhereInput[]
    OR?: PaymentTrackerWhereInput[]
    NOT?: PaymentTrackerWhereInput | PaymentTrackerWhereInput[]
    userId?: StringFilter<"PaymentTracker"> | string
    welfareProgramId?: StringFilter<"PaymentTracker"> | string
    cycleStart?: DateTimeFilter<"PaymentTracker"> | Date | string
    cycleEnd?: DateTimeFilter<"PaymentTracker"> | Date | string
    paymentStatus?: EnumPaymentStatusFilter<"PaymentTracker"> | $Enums.PaymentStatus
    paymentId?: StringFilter<"PaymentTracker"> | string
    remainingAmount?: FloatFilter<"PaymentTracker"> | number
    prepaidAmount?: FloatFilter<"PaymentTracker"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
  }, "id">

  export type PaymentTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    cycleStart?: SortOrder
    cycleEnd?: SortOrder
    paymentStatus?: SortOrder
    paymentId?: SortOrder
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
    _count?: PaymentTrackerCountOrderByAggregateInput
    _avg?: PaymentTrackerAvgOrderByAggregateInput
    _max?: PaymentTrackerMaxOrderByAggregateInput
    _min?: PaymentTrackerMinOrderByAggregateInput
    _sum?: PaymentTrackerSumOrderByAggregateInput
  }

  export type PaymentTrackerScalarWhereWithAggregatesInput = {
    AND?: PaymentTrackerScalarWhereWithAggregatesInput | PaymentTrackerScalarWhereWithAggregatesInput[]
    OR?: PaymentTrackerScalarWhereWithAggregatesInput[]
    NOT?: PaymentTrackerScalarWhereWithAggregatesInput | PaymentTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentTracker"> | string
    userId?: StringWithAggregatesFilter<"PaymentTracker"> | string
    welfareProgramId?: StringWithAggregatesFilter<"PaymentTracker"> | string
    cycleStart?: DateTimeWithAggregatesFilter<"PaymentTracker"> | Date | string
    cycleEnd?: DateTimeWithAggregatesFilter<"PaymentTracker"> | Date | string
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"PaymentTracker"> | $Enums.PaymentStatus
    paymentId?: StringWithAggregatesFilter<"PaymentTracker"> | string
    remainingAmount?: FloatWithAggregatesFilter<"PaymentTracker"> | number
    prepaidAmount?: FloatWithAggregatesFilter<"PaymentTracker"> | number
  }

  export type ExpenseWhereInput = {
    AND?: ExpenseWhereInput | ExpenseWhereInput[]
    OR?: ExpenseWhereInput[]
    NOT?: ExpenseWhereInput | ExpenseWhereInput[]
    id?: StringFilter<"Expense"> | string
    description?: StringFilter<"Expense"> | string
    amount?: FloatFilter<"Expense"> | number
    welfareProgramId?: StringFilter<"Expense"> | string
    recordedAt?: DateTimeFilter<"Expense"> | Date | string
    recordedBy?: StringFilter<"Expense"> | string
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
  }

  export type ExpenseOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    welfareProgramId?: SortOrder
    recordedAt?: SortOrder
    recordedBy?: SortOrder
    welfareProgram?: WelfareProgramOrderByWithRelationInput
  }

  export type ExpenseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExpenseWhereInput | ExpenseWhereInput[]
    OR?: ExpenseWhereInput[]
    NOT?: ExpenseWhereInput | ExpenseWhereInput[]
    description?: StringFilter<"Expense"> | string
    amount?: FloatFilter<"Expense"> | number
    welfareProgramId?: StringFilter<"Expense"> | string
    recordedAt?: DateTimeFilter<"Expense"> | Date | string
    recordedBy?: StringFilter<"Expense"> | string
    welfareProgram?: XOR<WelfareProgramScalarRelationFilter, WelfareProgramWhereInput>
  }, "id">

  export type ExpenseOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    welfareProgramId?: SortOrder
    recordedAt?: SortOrder
    recordedBy?: SortOrder
    _count?: ExpenseCountOrderByAggregateInput
    _avg?: ExpenseAvgOrderByAggregateInput
    _max?: ExpenseMaxOrderByAggregateInput
    _min?: ExpenseMinOrderByAggregateInput
    _sum?: ExpenseSumOrderByAggregateInput
  }

  export type ExpenseScalarWhereWithAggregatesInput = {
    AND?: ExpenseScalarWhereWithAggregatesInput | ExpenseScalarWhereWithAggregatesInput[]
    OR?: ExpenseScalarWhereWithAggregatesInput[]
    NOT?: ExpenseScalarWhereWithAggregatesInput | ExpenseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Expense"> | string
    description?: StringWithAggregatesFilter<"Expense"> | string
    amount?: FloatWithAggregatesFilter<"Expense"> | number
    welfareProgramId?: StringWithAggregatesFilter<"Expense"> | string
    recordedAt?: DateTimeWithAggregatesFilter<"Expense"> | Date | string
    recordedBy?: StringWithAggregatesFilter<"Expense"> | string
  }

  export type AnalyticsWhereInput = {
    AND?: AnalyticsWhereInput | AnalyticsWhereInput[]
    OR?: AnalyticsWhereInput[]
    NOT?: AnalyticsWhereInput | AnalyticsWhereInput[]
    id?: StringFilter<"Analytics"> | string
    totalMembers?: IntFilter<"Analytics"> | number
    totalRevenue?: FloatFilter<"Analytics"> | number
    recentPayments?: JsonFilter<"Analytics">
    monthlyPayments?: JsonFilter<"Analytics">
    weeklyPayments?: JsonFilter<"Analytics">
    dailyPayments?: JsonFilter<"Analytics">
  }

  export type AnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
    recentPayments?: SortOrder
    monthlyPayments?: SortOrder
    weeklyPayments?: SortOrder
    dailyPayments?: SortOrder
  }

  export type AnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnalyticsWhereInput | AnalyticsWhereInput[]
    OR?: AnalyticsWhereInput[]
    NOT?: AnalyticsWhereInput | AnalyticsWhereInput[]
    totalMembers?: IntFilter<"Analytics"> | number
    totalRevenue?: FloatFilter<"Analytics"> | number
    recentPayments?: JsonFilter<"Analytics">
    monthlyPayments?: JsonFilter<"Analytics">
    weeklyPayments?: JsonFilter<"Analytics">
    dailyPayments?: JsonFilter<"Analytics">
  }, "id">

  export type AnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
    recentPayments?: SortOrder
    monthlyPayments?: SortOrder
    weeklyPayments?: SortOrder
    dailyPayments?: SortOrder
    _count?: AnalyticsCountOrderByAggregateInput
    _avg?: AnalyticsAvgOrderByAggregateInput
    _max?: AnalyticsMaxOrderByAggregateInput
    _min?: AnalyticsMinOrderByAggregateInput
    _sum?: AnalyticsSumOrderByAggregateInput
  }

  export type AnalyticsScalarWhereWithAggregatesInput = {
    AND?: AnalyticsScalarWhereWithAggregatesInput | AnalyticsScalarWhereWithAggregatesInput[]
    OR?: AnalyticsScalarWhereWithAggregatesInput[]
    NOT?: AnalyticsScalarWhereWithAggregatesInput | AnalyticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Analytics"> | string
    totalMembers?: IntWithAggregatesFilter<"Analytics"> | number
    totalRevenue?: FloatWithAggregatesFilter<"Analytics"> | number
    recentPayments?: JsonWithAggregatesFilter<"Analytics">
    monthlyPayments?: JsonWithAggregatesFilter<"Analytics">
    weeklyPayments?: JsonWithAggregatesFilter<"Analytics">
    dailyPayments?: JsonWithAggregatesFilter<"Analytics">
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutUserInput
    payments?: PaymentCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutUserNestedInput
    payments?: PaymentUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelfareProgramCreateInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    createdByUser: UserCreateNestedOneWithoutWelfareProgramsInput
    enrollments?: EnrollmentCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentUncheckedCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutWelfareProgramsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramCreateManyInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt?: Date | string
  }

  export type WelfareProgramUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WelfareProgramUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateInput = {
    id?: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
    user: UserCreateNestedOneWithoutEnrollmentsInput
    welfareProgram: WelfareProgramCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateInput = {
    id?: string
    userId: string
    welfareProgramId: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
  }

  export type EnrollmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyInput = {
    id?: string
    userId: string
    welfareProgramId: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
  }

  export type EnrollmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    user: UserCreateNestedOneWithoutPaymentsInput
    welfareProgram: WelfareProgramCreateNestedOneWithoutPaymentsInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    userId: string
    welfareProgramId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutPaymentsNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentCreateManyInput = {
    id?: string
    userId: string
    welfareProgramId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type PaymentTrackerCreateInput = {
    id?: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    remainingAmount?: number
    prepaidAmount?: number
    user: UserCreateNestedOneWithoutPaymentTrackersInput
    welfareProgram: WelfareProgramCreateNestedOneWithoutPaymentTrackersInput
    payment: PaymentCreateNestedOneWithoutPaymentTrackersInput
  }

  export type PaymentTrackerUncheckedCreateInput = {
    id?: string
    userId: string
    welfareProgramId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type PaymentTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPaymentTrackersNestedInput
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutPaymentTrackersNestedInput
    payment?: PaymentUpdateOneRequiredWithoutPaymentTrackersNestedInput
  }

  export type PaymentTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentId?: StringFieldUpdateOperationsInput | string
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentTrackerCreateManyInput = {
    id?: string
    userId: string
    welfareProgramId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type PaymentTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentId?: StringFieldUpdateOperationsInput | string
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type ExpenseCreateInput = {
    id?: string
    description: string
    amount?: number
    recordedAt?: Date | string
    recordedBy: string
    welfareProgram: WelfareProgramCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateInput = {
    id?: string
    description: string
    amount?: number
    welfareProgramId: string
    recordedAt?: Date | string
    recordedBy: string
  }

  export type ExpenseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseCreateManyInput = {
    id?: string
    description: string
    amount?: number
    welfareProgramId: string
    recordedAt?: Date | string
    recordedBy: string
  }

  export type ExpenseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AnalyticsCreateInput = {
    id?: string
    totalMembers?: number
    totalRevenue?: number
    recentPayments: JsonNullValueInput | InputJsonValue
    monthlyPayments: JsonNullValueInput | InputJsonValue
    weeklyPayments: JsonNullValueInput | InputJsonValue
    dailyPayments: JsonNullValueInput | InputJsonValue
  }

  export type AnalyticsUncheckedCreateInput = {
    id?: string
    totalMembers?: number
    totalRevenue?: number
    recentPayments: JsonNullValueInput | InputJsonValue
    monthlyPayments: JsonNullValueInput | InputJsonValue
    weeklyPayments: JsonNullValueInput | InputJsonValue
    dailyPayments: JsonNullValueInput | InputJsonValue
  }

  export type AnalyticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalMembers?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    recentPayments?: JsonNullValueInput | InputJsonValue
    monthlyPayments?: JsonNullValueInput | InputJsonValue
    weeklyPayments?: JsonNullValueInput | InputJsonValue
    dailyPayments?: JsonNullValueInput | InputJsonValue
  }

  export type AnalyticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalMembers?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    recentPayments?: JsonNullValueInput | InputJsonValue
    monthlyPayments?: JsonNullValueInput | InputJsonValue
    weeklyPayments?: JsonNullValueInput | InputJsonValue
    dailyPayments?: JsonNullValueInput | InputJsonValue
  }

  export type AnalyticsCreateManyInput = {
    id?: string
    totalMembers?: number
    totalRevenue?: number
    recentPayments: JsonNullValueInput | InputJsonValue
    monthlyPayments: JsonNullValueInput | InputJsonValue
    weeklyPayments: JsonNullValueInput | InputJsonValue
    dailyPayments: JsonNullValueInput | InputJsonValue
  }

  export type AnalyticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalMembers?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    recentPayments?: JsonNullValueInput | InputJsonValue
    monthlyPayments?: JsonNullValueInput | InputJsonValue
    weeklyPayments?: JsonNullValueInput | InputJsonValue
    dailyPayments?: JsonNullValueInput | InputJsonValue
  }

  export type AnalyticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalMembers?: IntFieldUpdateOperationsInput | number
    totalRevenue?: FloatFieldUpdateOperationsInput | number
    recentPayments?: JsonNullValueInput | InputJsonValue
    monthlyPayments?: JsonNullValueInput | InputJsonValue
    weeklyPayments?: JsonNullValueInput | InputJsonValue
    dailyPayments?: JsonNullValueInput | InputJsonValue
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentTrackerListRelationFilter = {
    every?: PaymentTrackerWhereInput
    some?: PaymentTrackerWhereInput
    none?: PaymentTrackerWhereInput
  }

  export type WelfareProgramListRelationFilter = {
    every?: WelfareProgramWhereInput
    some?: WelfareProgramWhereInput
    none?: WelfareProgramWhereInput
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentTrackerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WelfareProgramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    registeredAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    registeredAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    registeredAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumPaymentCycleFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentCycle | EnumPaymentCycleFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentCycleFilter<$PrismaModel> | $Enums.PaymentCycle
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ExpenseListRelationFilter = {
    every?: ExpenseWhereInput
    some?: ExpenseWhereInput
    none?: ExpenseWhereInput
  }

  export type ExpenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WelfareProgramCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    expectedAmount?: SortOrder
    paymentCycle?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type WelfareProgramAvgOrderByAggregateInput = {
    amount?: SortOrder
    expectedAmount?: SortOrder
  }

  export type WelfareProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    expectedAmount?: SortOrder
    paymentCycle?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type WelfareProgramMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    expectedAmount?: SortOrder
    paymentCycle?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type WelfareProgramSumOrderByAggregateInput = {
    amount?: SortOrder
    expectedAmount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumPaymentCycleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentCycle | EnumPaymentCycleFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentCycleWithAggregatesFilter<$PrismaModel> | $Enums.PaymentCycle
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentCycleFilter<$PrismaModel>
    _max?: NestedEnumPaymentCycleFilter<$PrismaModel>
  }

  export type EnumEnrollmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusFilter<$PrismaModel> | $Enums.EnrollmentStatus
  }

  export type WelfareProgramScalarRelationFilter = {
    is?: WelfareProgramWhereInput
    isNot?: WelfareProgramWhereInput
  }

  export type EnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    status?: SortOrder
    enrolledAt?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    status?: SortOrder
    enrolledAt?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    status?: SortOrder
    enrolledAt?: SortOrder
  }

  export type EnumEnrollmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnrollmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
    _max?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
  }

  export type EnumPaymentModeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeFilter<$PrismaModel> | $Enums.PaymentMode
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumPaymentStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableFilter<$PrismaModel> | $Enums.PaymentStatus | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMode?: SortOrder
    receiptNumber?: SortOrder
    paystackreference?: SortOrder
    access_code?: SortOrder
    status?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMode?: SortOrder
    receiptNumber?: SortOrder
    paystackreference?: SortOrder
    access_code?: SortOrder
    status?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    amount?: SortOrder
    paymentDate?: SortOrder
    paymentMode?: SortOrder
    receiptNumber?: SortOrder
    paystackreference?: SortOrder
    access_code?: SortOrder
    status?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentModeFilter<$PrismaModel>
    _max?: NestedEnumPaymentModeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentScalarRelationFilter = {
    is?: PaymentWhereInput
    isNot?: PaymentWhereInput
  }

  export type PaymentTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    cycleStart?: SortOrder
    cycleEnd?: SortOrder
    paymentStatus?: SortOrder
    paymentId?: SortOrder
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
  }

  export type PaymentTrackerAvgOrderByAggregateInput = {
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
  }

  export type PaymentTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    cycleStart?: SortOrder
    cycleEnd?: SortOrder
    paymentStatus?: SortOrder
    paymentId?: SortOrder
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
  }

  export type PaymentTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    welfareProgramId?: SortOrder
    cycleStart?: SortOrder
    cycleEnd?: SortOrder
    paymentStatus?: SortOrder
    paymentId?: SortOrder
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
  }

  export type PaymentTrackerSumOrderByAggregateInput = {
    remainingAmount?: SortOrder
    prepaidAmount?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type ExpenseCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    welfareProgramId?: SortOrder
    recordedAt?: SortOrder
    recordedBy?: SortOrder
  }

  export type ExpenseAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ExpenseMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    welfareProgramId?: SortOrder
    recordedAt?: SortOrder
    recordedBy?: SortOrder
  }

  export type ExpenseMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    welfareProgramId?: SortOrder
    recordedAt?: SortOrder
    recordedBy?: SortOrder
  }

  export type ExpenseSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
    recentPayments?: SortOrder
    monthlyPayments?: SortOrder
    weeklyPayments?: SortOrder
    dailyPayments?: SortOrder
  }

  export type AnalyticsAvgOrderByAggregateInput = {
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
  }

  export type AnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
  }

  export type AnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
  }

  export type AnalyticsSumOrderByAggregateInput = {
    totalMembers?: SortOrder
    totalRevenue?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnrollmentCreateNestedManyWithoutUserInput = {
    create?: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput> | EnrollmentCreateWithoutUserInput[] | EnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutUserInput | EnrollmentCreateOrConnectWithoutUserInput[]
    createMany?: EnrollmentCreateManyUserInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentTrackerCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentTrackerCreateWithoutUserInput, PaymentTrackerUncheckedCreateWithoutUserInput> | PaymentTrackerCreateWithoutUserInput[] | PaymentTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutUserInput | PaymentTrackerCreateOrConnectWithoutUserInput[]
    createMany?: PaymentTrackerCreateManyUserInputEnvelope
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
  }

  export type WelfareProgramCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<WelfareProgramCreateWithoutCreatedByUserInput, WelfareProgramUncheckedCreateWithoutCreatedByUserInput> | WelfareProgramCreateWithoutCreatedByUserInput[] | WelfareProgramUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutCreatedByUserInput | WelfareProgramCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: WelfareProgramCreateManyCreatedByUserInputEnvelope
    connect?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput> | EnrollmentCreateWithoutUserInput[] | EnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutUserInput | EnrollmentCreateOrConnectWithoutUserInput[]
    createMany?: EnrollmentCreateManyUserInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentTrackerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentTrackerCreateWithoutUserInput, PaymentTrackerUncheckedCreateWithoutUserInput> | PaymentTrackerCreateWithoutUserInput[] | PaymentTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutUserInput | PaymentTrackerCreateOrConnectWithoutUserInput[]
    createMany?: PaymentTrackerCreateManyUserInputEnvelope
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
  }

  export type WelfareProgramUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<WelfareProgramCreateWithoutCreatedByUserInput, WelfareProgramUncheckedCreateWithoutCreatedByUserInput> | WelfareProgramCreateWithoutCreatedByUserInput[] | WelfareProgramUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutCreatedByUserInput | WelfareProgramCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: WelfareProgramCreateManyCreatedByUserInputEnvelope
    connect?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnrollmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput> | EnrollmentCreateWithoutUserInput[] | EnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutUserInput | EnrollmentCreateOrConnectWithoutUserInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutUserInput | EnrollmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EnrollmentCreateManyUserInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutUserInput | EnrollmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutUserInput | EnrollmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUserInput | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUserInput | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUserInput | PaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentTrackerUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentTrackerCreateWithoutUserInput, PaymentTrackerUncheckedCreateWithoutUserInput> | PaymentTrackerCreateWithoutUserInput[] | PaymentTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutUserInput | PaymentTrackerCreateOrConnectWithoutUserInput[]
    upsert?: PaymentTrackerUpsertWithWhereUniqueWithoutUserInput | PaymentTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentTrackerCreateManyUserInputEnvelope
    set?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    disconnect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    delete?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    update?: PaymentTrackerUpdateWithWhereUniqueWithoutUserInput | PaymentTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentTrackerUpdateManyWithWhereWithoutUserInput | PaymentTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
  }

  export type WelfareProgramUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<WelfareProgramCreateWithoutCreatedByUserInput, WelfareProgramUncheckedCreateWithoutCreatedByUserInput> | WelfareProgramCreateWithoutCreatedByUserInput[] | WelfareProgramUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutCreatedByUserInput | WelfareProgramCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: WelfareProgramUpsertWithWhereUniqueWithoutCreatedByUserInput | WelfareProgramUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: WelfareProgramCreateManyCreatedByUserInputEnvelope
    set?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    disconnect?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    delete?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    connect?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    update?: WelfareProgramUpdateWithWhereUniqueWithoutCreatedByUserInput | WelfareProgramUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: WelfareProgramUpdateManyWithWhereWithoutCreatedByUserInput | WelfareProgramUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: WelfareProgramScalarWhereInput | WelfareProgramScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput> | EnrollmentCreateWithoutUserInput[] | EnrollmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutUserInput | EnrollmentCreateOrConnectWithoutUserInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutUserInput | EnrollmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EnrollmentCreateManyUserInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutUserInput | EnrollmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutUserInput | EnrollmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUserInput | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUserInput | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUserInput | PaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentTrackerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentTrackerCreateWithoutUserInput, PaymentTrackerUncheckedCreateWithoutUserInput> | PaymentTrackerCreateWithoutUserInput[] | PaymentTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutUserInput | PaymentTrackerCreateOrConnectWithoutUserInput[]
    upsert?: PaymentTrackerUpsertWithWhereUniqueWithoutUserInput | PaymentTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentTrackerCreateManyUserInputEnvelope
    set?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    disconnect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    delete?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    update?: PaymentTrackerUpdateWithWhereUniqueWithoutUserInput | PaymentTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentTrackerUpdateManyWithWhereWithoutUserInput | PaymentTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
  }

  export type WelfareProgramUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<WelfareProgramCreateWithoutCreatedByUserInput, WelfareProgramUncheckedCreateWithoutCreatedByUserInput> | WelfareProgramCreateWithoutCreatedByUserInput[] | WelfareProgramUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutCreatedByUserInput | WelfareProgramCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: WelfareProgramUpsertWithWhereUniqueWithoutCreatedByUserInput | WelfareProgramUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: WelfareProgramCreateManyCreatedByUserInputEnvelope
    set?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    disconnect?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    delete?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    connect?: WelfareProgramWhereUniqueInput | WelfareProgramWhereUniqueInput[]
    update?: WelfareProgramUpdateWithWhereUniqueWithoutCreatedByUserInput | WelfareProgramUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: WelfareProgramUpdateManyWithWhereWithoutCreatedByUserInput | WelfareProgramUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: WelfareProgramScalarWhereInput | WelfareProgramScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWelfareProgramsInput = {
    create?: XOR<UserCreateWithoutWelfareProgramsInput, UserUncheckedCreateWithoutWelfareProgramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWelfareProgramsInput
    connect?: UserWhereUniqueInput
  }

  export type EnrollmentCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<EnrollmentCreateWithoutWelfareProgramInput, EnrollmentUncheckedCreateWithoutWelfareProgramInput> | EnrollmentCreateWithoutWelfareProgramInput[] | EnrollmentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutWelfareProgramInput | EnrollmentCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: EnrollmentCreateManyWelfareProgramInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<PaymentCreateWithoutWelfareProgramInput, PaymentUncheckedCreateWithoutWelfareProgramInput> | PaymentCreateWithoutWelfareProgramInput[] | PaymentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutWelfareProgramInput | PaymentCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: PaymentCreateManyWelfareProgramInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentTrackerCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<PaymentTrackerCreateWithoutWelfareProgramInput, PaymentTrackerUncheckedCreateWithoutWelfareProgramInput> | PaymentTrackerCreateWithoutWelfareProgramInput[] | PaymentTrackerUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutWelfareProgramInput | PaymentTrackerCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: PaymentTrackerCreateManyWelfareProgramInputEnvelope
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
  }

  export type ExpenseCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<ExpenseCreateWithoutWelfareProgramInput, ExpenseUncheckedCreateWithoutWelfareProgramInput> | ExpenseCreateWithoutWelfareProgramInput[] | ExpenseUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutWelfareProgramInput | ExpenseCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: ExpenseCreateManyWelfareProgramInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<EnrollmentCreateWithoutWelfareProgramInput, EnrollmentUncheckedCreateWithoutWelfareProgramInput> | EnrollmentCreateWithoutWelfareProgramInput[] | EnrollmentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutWelfareProgramInput | EnrollmentCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: EnrollmentCreateManyWelfareProgramInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<PaymentCreateWithoutWelfareProgramInput, PaymentUncheckedCreateWithoutWelfareProgramInput> | PaymentCreateWithoutWelfareProgramInput[] | PaymentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutWelfareProgramInput | PaymentCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: PaymentCreateManyWelfareProgramInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentTrackerUncheckedCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<PaymentTrackerCreateWithoutWelfareProgramInput, PaymentTrackerUncheckedCreateWithoutWelfareProgramInput> | PaymentTrackerCreateWithoutWelfareProgramInput[] | PaymentTrackerUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutWelfareProgramInput | PaymentTrackerCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: PaymentTrackerCreateManyWelfareProgramInputEnvelope
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
  }

  export type ExpenseUncheckedCreateNestedManyWithoutWelfareProgramInput = {
    create?: XOR<ExpenseCreateWithoutWelfareProgramInput, ExpenseUncheckedCreateWithoutWelfareProgramInput> | ExpenseCreateWithoutWelfareProgramInput[] | ExpenseUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutWelfareProgramInput | ExpenseCreateOrConnectWithoutWelfareProgramInput[]
    createMany?: ExpenseCreateManyWelfareProgramInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPaymentCycleFieldUpdateOperationsInput = {
    set?: $Enums.PaymentCycle
  }

  export type UserUpdateOneRequiredWithoutWelfareProgramsNestedInput = {
    create?: XOR<UserCreateWithoutWelfareProgramsInput, UserUncheckedCreateWithoutWelfareProgramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWelfareProgramsInput
    upsert?: UserUpsertWithoutWelfareProgramsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWelfareProgramsInput, UserUpdateWithoutWelfareProgramsInput>, UserUncheckedUpdateWithoutWelfareProgramsInput>
  }

  export type EnrollmentUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<EnrollmentCreateWithoutWelfareProgramInput, EnrollmentUncheckedCreateWithoutWelfareProgramInput> | EnrollmentCreateWithoutWelfareProgramInput[] | EnrollmentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutWelfareProgramInput | EnrollmentCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutWelfareProgramInput | EnrollmentUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: EnrollmentCreateManyWelfareProgramInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutWelfareProgramInput | EnrollmentUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutWelfareProgramInput | EnrollmentUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<PaymentCreateWithoutWelfareProgramInput, PaymentUncheckedCreateWithoutWelfareProgramInput> | PaymentCreateWithoutWelfareProgramInput[] | PaymentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutWelfareProgramInput | PaymentCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutWelfareProgramInput | PaymentUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: PaymentCreateManyWelfareProgramInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutWelfareProgramInput | PaymentUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutWelfareProgramInput | PaymentUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentTrackerUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<PaymentTrackerCreateWithoutWelfareProgramInput, PaymentTrackerUncheckedCreateWithoutWelfareProgramInput> | PaymentTrackerCreateWithoutWelfareProgramInput[] | PaymentTrackerUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutWelfareProgramInput | PaymentTrackerCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: PaymentTrackerUpsertWithWhereUniqueWithoutWelfareProgramInput | PaymentTrackerUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: PaymentTrackerCreateManyWelfareProgramInputEnvelope
    set?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    disconnect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    delete?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    update?: PaymentTrackerUpdateWithWhereUniqueWithoutWelfareProgramInput | PaymentTrackerUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: PaymentTrackerUpdateManyWithWhereWithoutWelfareProgramInput | PaymentTrackerUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
  }

  export type ExpenseUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<ExpenseCreateWithoutWelfareProgramInput, ExpenseUncheckedCreateWithoutWelfareProgramInput> | ExpenseCreateWithoutWelfareProgramInput[] | ExpenseUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutWelfareProgramInput | ExpenseCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutWelfareProgramInput | ExpenseUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: ExpenseCreateManyWelfareProgramInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutWelfareProgramInput | ExpenseUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutWelfareProgramInput | ExpenseUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<EnrollmentCreateWithoutWelfareProgramInput, EnrollmentUncheckedCreateWithoutWelfareProgramInput> | EnrollmentCreateWithoutWelfareProgramInput[] | EnrollmentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutWelfareProgramInput | EnrollmentCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutWelfareProgramInput | EnrollmentUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: EnrollmentCreateManyWelfareProgramInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutWelfareProgramInput | EnrollmentUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutWelfareProgramInput | EnrollmentUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<PaymentCreateWithoutWelfareProgramInput, PaymentUncheckedCreateWithoutWelfareProgramInput> | PaymentCreateWithoutWelfareProgramInput[] | PaymentUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutWelfareProgramInput | PaymentCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutWelfareProgramInput | PaymentUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: PaymentCreateManyWelfareProgramInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutWelfareProgramInput | PaymentUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutWelfareProgramInput | PaymentUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<PaymentTrackerCreateWithoutWelfareProgramInput, PaymentTrackerUncheckedCreateWithoutWelfareProgramInput> | PaymentTrackerCreateWithoutWelfareProgramInput[] | PaymentTrackerUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutWelfareProgramInput | PaymentTrackerCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: PaymentTrackerUpsertWithWhereUniqueWithoutWelfareProgramInput | PaymentTrackerUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: PaymentTrackerCreateManyWelfareProgramInputEnvelope
    set?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    disconnect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    delete?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    update?: PaymentTrackerUpdateWithWhereUniqueWithoutWelfareProgramInput | PaymentTrackerUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: PaymentTrackerUpdateManyWithWhereWithoutWelfareProgramInput | PaymentTrackerUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
  }

  export type ExpenseUncheckedUpdateManyWithoutWelfareProgramNestedInput = {
    create?: XOR<ExpenseCreateWithoutWelfareProgramInput, ExpenseUncheckedCreateWithoutWelfareProgramInput> | ExpenseCreateWithoutWelfareProgramInput[] | ExpenseUncheckedCreateWithoutWelfareProgramInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutWelfareProgramInput | ExpenseCreateOrConnectWithoutWelfareProgramInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutWelfareProgramInput | ExpenseUpsertWithWhereUniqueWithoutWelfareProgramInput[]
    createMany?: ExpenseCreateManyWelfareProgramInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutWelfareProgramInput | ExpenseUpdateWithWhereUniqueWithoutWelfareProgramInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutWelfareProgramInput | ExpenseUpdateManyWithWhereWithoutWelfareProgramInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type WelfareProgramCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<WelfareProgramCreateWithoutEnrollmentsInput, WelfareProgramUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutEnrollmentsInput
    connect?: WelfareProgramWhereUniqueInput
  }

  export type EnumEnrollmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.EnrollmentStatus
  }

  export type UserUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    upsert?: UserUpsertWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsInput, UserUpdateWithoutEnrollmentsInput>, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type WelfareProgramUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<WelfareProgramCreateWithoutEnrollmentsInput, WelfareProgramUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutEnrollmentsInput
    upsert?: WelfareProgramUpsertWithoutEnrollmentsInput
    connect?: WelfareProgramWhereUniqueInput
    update?: XOR<XOR<WelfareProgramUpdateToOneWithWhereWithoutEnrollmentsInput, WelfareProgramUpdateWithoutEnrollmentsInput>, WelfareProgramUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type WelfareProgramCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<WelfareProgramCreateWithoutPaymentsInput, WelfareProgramUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutPaymentsInput
    connect?: WelfareProgramWhereUniqueInput
  }

  export type PaymentTrackerCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentTrackerCreateWithoutPaymentInput, PaymentTrackerUncheckedCreateWithoutPaymentInput> | PaymentTrackerCreateWithoutPaymentInput[] | PaymentTrackerUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutPaymentInput | PaymentTrackerCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentTrackerCreateManyPaymentInputEnvelope
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
  }

  export type PaymentTrackerUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentTrackerCreateWithoutPaymentInput, PaymentTrackerUncheckedCreateWithoutPaymentInput> | PaymentTrackerCreateWithoutPaymentInput[] | PaymentTrackerUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutPaymentInput | PaymentTrackerCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentTrackerCreateManyPaymentInputEnvelope
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
  }

  export type EnumPaymentModeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMode
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus | null
  }

  export type UserUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    upsert?: UserUpsertWithoutPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentsInput, UserUpdateWithoutPaymentsInput>, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type WelfareProgramUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<WelfareProgramCreateWithoutPaymentsInput, WelfareProgramUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutPaymentsInput
    upsert?: WelfareProgramUpsertWithoutPaymentsInput
    connect?: WelfareProgramWhereUniqueInput
    update?: XOR<XOR<WelfareProgramUpdateToOneWithWhereWithoutPaymentsInput, WelfareProgramUpdateWithoutPaymentsInput>, WelfareProgramUncheckedUpdateWithoutPaymentsInput>
  }

  export type PaymentTrackerUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentTrackerCreateWithoutPaymentInput, PaymentTrackerUncheckedCreateWithoutPaymentInput> | PaymentTrackerCreateWithoutPaymentInput[] | PaymentTrackerUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutPaymentInput | PaymentTrackerCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentTrackerUpsertWithWhereUniqueWithoutPaymentInput | PaymentTrackerUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentTrackerCreateManyPaymentInputEnvelope
    set?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    disconnect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    delete?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    update?: PaymentTrackerUpdateWithWhereUniqueWithoutPaymentInput | PaymentTrackerUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentTrackerUpdateManyWithWhereWithoutPaymentInput | PaymentTrackerUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
  }

  export type PaymentTrackerUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentTrackerCreateWithoutPaymentInput, PaymentTrackerUncheckedCreateWithoutPaymentInput> | PaymentTrackerCreateWithoutPaymentInput[] | PaymentTrackerUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentTrackerCreateOrConnectWithoutPaymentInput | PaymentTrackerCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentTrackerUpsertWithWhereUniqueWithoutPaymentInput | PaymentTrackerUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentTrackerCreateManyPaymentInputEnvelope
    set?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    disconnect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    delete?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    connect?: PaymentTrackerWhereUniqueInput | PaymentTrackerWhereUniqueInput[]
    update?: PaymentTrackerUpdateWithWhereUniqueWithoutPaymentInput | PaymentTrackerUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentTrackerUpdateManyWithWhereWithoutPaymentInput | PaymentTrackerUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPaymentTrackersInput = {
    create?: XOR<UserCreateWithoutPaymentTrackersInput, UserUncheckedCreateWithoutPaymentTrackersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentTrackersInput
    connect?: UserWhereUniqueInput
  }

  export type WelfareProgramCreateNestedOneWithoutPaymentTrackersInput = {
    create?: XOR<WelfareProgramCreateWithoutPaymentTrackersInput, WelfareProgramUncheckedCreateWithoutPaymentTrackersInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutPaymentTrackersInput
    connect?: WelfareProgramWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutPaymentTrackersInput = {
    create?: XOR<PaymentCreateWithoutPaymentTrackersInput, PaymentUncheckedCreateWithoutPaymentTrackersInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentTrackersInput
    connect?: PaymentWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type UserUpdateOneRequiredWithoutPaymentTrackersNestedInput = {
    create?: XOR<UserCreateWithoutPaymentTrackersInput, UserUncheckedCreateWithoutPaymentTrackersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentTrackersInput
    upsert?: UserUpsertWithoutPaymentTrackersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentTrackersInput, UserUpdateWithoutPaymentTrackersInput>, UserUncheckedUpdateWithoutPaymentTrackersInput>
  }

  export type WelfareProgramUpdateOneRequiredWithoutPaymentTrackersNestedInput = {
    create?: XOR<WelfareProgramCreateWithoutPaymentTrackersInput, WelfareProgramUncheckedCreateWithoutPaymentTrackersInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutPaymentTrackersInput
    upsert?: WelfareProgramUpsertWithoutPaymentTrackersInput
    connect?: WelfareProgramWhereUniqueInput
    update?: XOR<XOR<WelfareProgramUpdateToOneWithWhereWithoutPaymentTrackersInput, WelfareProgramUpdateWithoutPaymentTrackersInput>, WelfareProgramUncheckedUpdateWithoutPaymentTrackersInput>
  }

  export type PaymentUpdateOneRequiredWithoutPaymentTrackersNestedInput = {
    create?: XOR<PaymentCreateWithoutPaymentTrackersInput, PaymentUncheckedCreateWithoutPaymentTrackersInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentTrackersInput
    upsert?: PaymentUpsertWithoutPaymentTrackersInput
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutPaymentTrackersInput, PaymentUpdateWithoutPaymentTrackersInput>, PaymentUncheckedUpdateWithoutPaymentTrackersInput>
  }

  export type WelfareProgramCreateNestedOneWithoutExpensesInput = {
    create?: XOR<WelfareProgramCreateWithoutExpensesInput, WelfareProgramUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutExpensesInput
    connect?: WelfareProgramWhereUniqueInput
  }

  export type WelfareProgramUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<WelfareProgramCreateWithoutExpensesInput, WelfareProgramUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: WelfareProgramCreateOrConnectWithoutExpensesInput
    upsert?: WelfareProgramUpsertWithoutExpensesInput
    connect?: WelfareProgramWhereUniqueInput
    update?: XOR<XOR<WelfareProgramUpdateToOneWithWhereWithoutExpensesInput, WelfareProgramUpdateWithoutExpensesInput>, WelfareProgramUncheckedUpdateWithoutExpensesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPaymentCycleFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentCycle | EnumPaymentCycleFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentCycleFilter<$PrismaModel> | $Enums.PaymentCycle
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentCycleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentCycle | EnumPaymentCycleFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentCycle[] | ListEnumPaymentCycleFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentCycleWithAggregatesFilter<$PrismaModel> | $Enums.PaymentCycle
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentCycleFilter<$PrismaModel>
    _max?: NestedEnumPaymentCycleFilter<$PrismaModel>
  }

  export type NestedEnumEnrollmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusFilter<$PrismaModel> | $Enums.EnrollmentStatus
  }

  export type NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnrollmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
    _max?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentModeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeFilter<$PrismaModel> | $Enums.PaymentMode
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumPaymentStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableFilter<$PrismaModel> | $Enums.PaymentStatus | null
  }

  export type NestedEnumPaymentModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentModeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentModeFilter<$PrismaModel>
    _max?: NestedEnumPaymentModeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnrollmentCreateWithoutUserInput = {
    id?: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
    welfareProgram: WelfareProgramCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutUserInput = {
    id?: string
    welfareProgramId: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentCreateManyUserInputEnvelope = {
    data: EnrollmentCreateManyUserInput | EnrollmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutUserInput = {
    id?: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    welfareProgram: WelfareProgramCreateNestedOneWithoutPaymentsInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutUserInput = {
    id?: string
    welfareProgramId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutUserInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentCreateManyUserInputEnvelope = {
    data: PaymentCreateManyUserInput | PaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaymentTrackerCreateWithoutUserInput = {
    id?: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    remainingAmount?: number
    prepaidAmount?: number
    welfareProgram: WelfareProgramCreateNestedOneWithoutPaymentTrackersInput
    payment: PaymentCreateNestedOneWithoutPaymentTrackersInput
  }

  export type PaymentTrackerUncheckedCreateWithoutUserInput = {
    id?: string
    welfareProgramId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type PaymentTrackerCreateOrConnectWithoutUserInput = {
    where: PaymentTrackerWhereUniqueInput
    create: XOR<PaymentTrackerCreateWithoutUserInput, PaymentTrackerUncheckedCreateWithoutUserInput>
  }

  export type PaymentTrackerCreateManyUserInputEnvelope = {
    data: PaymentTrackerCreateManyUserInput | PaymentTrackerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WelfareProgramCreateWithoutCreatedByUserInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUncheckedCreateWithoutCreatedByUserInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentUncheckedCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramCreateOrConnectWithoutCreatedByUserInput = {
    where: WelfareProgramWhereUniqueInput
    create: XOR<WelfareProgramCreateWithoutCreatedByUserInput, WelfareProgramUncheckedCreateWithoutCreatedByUserInput>
  }

  export type WelfareProgramCreateManyCreatedByUserInputEnvelope = {
    data: WelfareProgramCreateManyCreatedByUserInput | WelfareProgramCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutUserInput, EnrollmentUncheckedUpdateWithoutUserInput>
    create: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutUserInput, EnrollmentUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutUserInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutUserInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    OR?: EnrollmentScalarWhereInput[]
    NOT?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    id?: StringFilter<"Enrollment"> | string
    userId?: StringFilter<"Enrollment"> | string
    welfareProgramId?: StringFilter<"Enrollment"> | string
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFilter<"Enrollment"> | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
  }

  export type PaymentUpdateManyWithWhereWithoutUserInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    userId?: StringFilter<"Payment"> | string
    welfareProgramId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    paymentMode?: EnumPaymentModeFilter<"Payment"> | $Enums.PaymentMode
    receiptNumber?: StringFilter<"Payment"> | string
    paystackreference?: StringNullableFilter<"Payment"> | string | null
    access_code?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusNullableFilter<"Payment"> | $Enums.PaymentStatus | null
  }

  export type PaymentTrackerUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentTrackerWhereUniqueInput
    update: XOR<PaymentTrackerUpdateWithoutUserInput, PaymentTrackerUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentTrackerCreateWithoutUserInput, PaymentTrackerUncheckedCreateWithoutUserInput>
  }

  export type PaymentTrackerUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentTrackerWhereUniqueInput
    data: XOR<PaymentTrackerUpdateWithoutUserInput, PaymentTrackerUncheckedUpdateWithoutUserInput>
  }

  export type PaymentTrackerUpdateManyWithWhereWithoutUserInput = {
    where: PaymentTrackerScalarWhereInput
    data: XOR<PaymentTrackerUpdateManyMutationInput, PaymentTrackerUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentTrackerScalarWhereInput = {
    AND?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
    OR?: PaymentTrackerScalarWhereInput[]
    NOT?: PaymentTrackerScalarWhereInput | PaymentTrackerScalarWhereInput[]
    id?: StringFilter<"PaymentTracker"> | string
    userId?: StringFilter<"PaymentTracker"> | string
    welfareProgramId?: StringFilter<"PaymentTracker"> | string
    cycleStart?: DateTimeFilter<"PaymentTracker"> | Date | string
    cycleEnd?: DateTimeFilter<"PaymentTracker"> | Date | string
    paymentStatus?: EnumPaymentStatusFilter<"PaymentTracker"> | $Enums.PaymentStatus
    paymentId?: StringFilter<"PaymentTracker"> | string
    remainingAmount?: FloatFilter<"PaymentTracker"> | number
    prepaidAmount?: FloatFilter<"PaymentTracker"> | number
  }

  export type WelfareProgramUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: WelfareProgramWhereUniqueInput
    update: XOR<WelfareProgramUpdateWithoutCreatedByUserInput, WelfareProgramUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<WelfareProgramCreateWithoutCreatedByUserInput, WelfareProgramUncheckedCreateWithoutCreatedByUserInput>
  }

  export type WelfareProgramUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: WelfareProgramWhereUniqueInput
    data: XOR<WelfareProgramUpdateWithoutCreatedByUserInput, WelfareProgramUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type WelfareProgramUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: WelfareProgramScalarWhereInput
    data: XOR<WelfareProgramUpdateManyMutationInput, WelfareProgramUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type WelfareProgramScalarWhereInput = {
    AND?: WelfareProgramScalarWhereInput | WelfareProgramScalarWhereInput[]
    OR?: WelfareProgramScalarWhereInput[]
    NOT?: WelfareProgramScalarWhereInput | WelfareProgramScalarWhereInput[]
    id?: StringFilter<"WelfareProgram"> | string
    name?: StringFilter<"WelfareProgram"> | string
    description?: StringFilter<"WelfareProgram"> | string
    amount?: FloatFilter<"WelfareProgram"> | number
    expectedAmount?: FloatFilter<"WelfareProgram"> | number
    paymentCycle?: EnumPaymentCycleFilter<"WelfareProgram"> | $Enums.PaymentCycle
    createdBy?: StringFilter<"WelfareProgram"> | string
    createdAt?: DateTimeFilter<"WelfareProgram"> | Date | string
  }

  export type UserCreateWithoutWelfareProgramsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutUserInput
    payments?: PaymentCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWelfareProgramsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWelfareProgramsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWelfareProgramsInput, UserUncheckedCreateWithoutWelfareProgramsInput>
  }

  export type EnrollmentCreateWithoutWelfareProgramInput = {
    id?: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
    user: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutWelfareProgramInput = {
    id?: string
    userId: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutWelfareProgramInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutWelfareProgramInput, EnrollmentUncheckedCreateWithoutWelfareProgramInput>
  }

  export type EnrollmentCreateManyWelfareProgramInputEnvelope = {
    data: EnrollmentCreateManyWelfareProgramInput | EnrollmentCreateManyWelfareProgramInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutWelfareProgramInput = {
    id?: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    user: UserCreateNestedOneWithoutPaymentsInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutWelfareProgramInput = {
    id?: string
    userId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutWelfareProgramInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutWelfareProgramInput, PaymentUncheckedCreateWithoutWelfareProgramInput>
  }

  export type PaymentCreateManyWelfareProgramInputEnvelope = {
    data: PaymentCreateManyWelfareProgramInput | PaymentCreateManyWelfareProgramInput[]
    skipDuplicates?: boolean
  }

  export type PaymentTrackerCreateWithoutWelfareProgramInput = {
    id?: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    remainingAmount?: number
    prepaidAmount?: number
    user: UserCreateNestedOneWithoutPaymentTrackersInput
    payment: PaymentCreateNestedOneWithoutPaymentTrackersInput
  }

  export type PaymentTrackerUncheckedCreateWithoutWelfareProgramInput = {
    id?: string
    userId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type PaymentTrackerCreateOrConnectWithoutWelfareProgramInput = {
    where: PaymentTrackerWhereUniqueInput
    create: XOR<PaymentTrackerCreateWithoutWelfareProgramInput, PaymentTrackerUncheckedCreateWithoutWelfareProgramInput>
  }

  export type PaymentTrackerCreateManyWelfareProgramInputEnvelope = {
    data: PaymentTrackerCreateManyWelfareProgramInput | PaymentTrackerCreateManyWelfareProgramInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseCreateWithoutWelfareProgramInput = {
    id?: string
    description: string
    amount?: number
    recordedAt?: Date | string
    recordedBy: string
  }

  export type ExpenseUncheckedCreateWithoutWelfareProgramInput = {
    id?: string
    description: string
    amount?: number
    recordedAt?: Date | string
    recordedBy: string
  }

  export type ExpenseCreateOrConnectWithoutWelfareProgramInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutWelfareProgramInput, ExpenseUncheckedCreateWithoutWelfareProgramInput>
  }

  export type ExpenseCreateManyWelfareProgramInputEnvelope = {
    data: ExpenseCreateManyWelfareProgramInput | ExpenseCreateManyWelfareProgramInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWelfareProgramsInput = {
    update: XOR<UserUpdateWithoutWelfareProgramsInput, UserUncheckedUpdateWithoutWelfareProgramsInput>
    create: XOR<UserCreateWithoutWelfareProgramsInput, UserUncheckedCreateWithoutWelfareProgramsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWelfareProgramsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWelfareProgramsInput, UserUncheckedUpdateWithoutWelfareProgramsInput>
  }

  export type UserUpdateWithoutWelfareProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutUserNestedInput
    payments?: PaymentUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWelfareProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutWelfareProgramInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutWelfareProgramInput, EnrollmentUncheckedUpdateWithoutWelfareProgramInput>
    create: XOR<EnrollmentCreateWithoutWelfareProgramInput, EnrollmentUncheckedCreateWithoutWelfareProgramInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutWelfareProgramInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutWelfareProgramInput, EnrollmentUncheckedUpdateWithoutWelfareProgramInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutWelfareProgramInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutWelfareProgramInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutWelfareProgramInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutWelfareProgramInput, PaymentUncheckedUpdateWithoutWelfareProgramInput>
    create: XOR<PaymentCreateWithoutWelfareProgramInput, PaymentUncheckedCreateWithoutWelfareProgramInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutWelfareProgramInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutWelfareProgramInput, PaymentUncheckedUpdateWithoutWelfareProgramInput>
  }

  export type PaymentUpdateManyWithWhereWithoutWelfareProgramInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutWelfareProgramInput>
  }

  export type PaymentTrackerUpsertWithWhereUniqueWithoutWelfareProgramInput = {
    where: PaymentTrackerWhereUniqueInput
    update: XOR<PaymentTrackerUpdateWithoutWelfareProgramInput, PaymentTrackerUncheckedUpdateWithoutWelfareProgramInput>
    create: XOR<PaymentTrackerCreateWithoutWelfareProgramInput, PaymentTrackerUncheckedCreateWithoutWelfareProgramInput>
  }

  export type PaymentTrackerUpdateWithWhereUniqueWithoutWelfareProgramInput = {
    where: PaymentTrackerWhereUniqueInput
    data: XOR<PaymentTrackerUpdateWithoutWelfareProgramInput, PaymentTrackerUncheckedUpdateWithoutWelfareProgramInput>
  }

  export type PaymentTrackerUpdateManyWithWhereWithoutWelfareProgramInput = {
    where: PaymentTrackerScalarWhereInput
    data: XOR<PaymentTrackerUpdateManyMutationInput, PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramInput>
  }

  export type ExpenseUpsertWithWhereUniqueWithoutWelfareProgramInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutWelfareProgramInput, ExpenseUncheckedUpdateWithoutWelfareProgramInput>
    create: XOR<ExpenseCreateWithoutWelfareProgramInput, ExpenseUncheckedCreateWithoutWelfareProgramInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutWelfareProgramInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutWelfareProgramInput, ExpenseUncheckedUpdateWithoutWelfareProgramInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutWelfareProgramInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutWelfareProgramInput>
  }

  export type ExpenseScalarWhereInput = {
    AND?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
    OR?: ExpenseScalarWhereInput[]
    NOT?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
    id?: StringFilter<"Expense"> | string
    description?: StringFilter<"Expense"> | string
    amount?: FloatFilter<"Expense"> | number
    welfareProgramId?: StringFilter<"Expense"> | string
    recordedAt?: DateTimeFilter<"Expense"> | Date | string
    recordedBy?: StringFilter<"Expense"> | string
  }

  export type UserCreateWithoutEnrollmentsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    payments?: PaymentCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
  }

  export type WelfareProgramCreateWithoutEnrollmentsInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    createdByUser: UserCreateNestedOneWithoutWelfareProgramsInput
    payments?: PaymentCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramCreateOrConnectWithoutEnrollmentsInput = {
    where: WelfareProgramWhereUniqueInput
    create: XOR<WelfareProgramCreateWithoutEnrollmentsInput, WelfareProgramUncheckedCreateWithoutEnrollmentsInput>
  }

  export type UserUpsertWithoutEnrollmentsInput = {
    update: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type WelfareProgramUpsertWithoutEnrollmentsInput = {
    update: XOR<WelfareProgramUpdateWithoutEnrollmentsInput, WelfareProgramUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<WelfareProgramCreateWithoutEnrollmentsInput, WelfareProgramUncheckedCreateWithoutEnrollmentsInput>
    where?: WelfareProgramWhereInput
  }

  export type WelfareProgramUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: WelfareProgramWhereInput
    data: XOR<WelfareProgramUpdateWithoutEnrollmentsInput, WelfareProgramUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type WelfareProgramUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutWelfareProgramsNestedInput
    payments?: PaymentUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutWelfareProgramNestedInput
  }

  export type UserCreateWithoutPaymentsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserCreateOrConnectWithoutPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
  }

  export type WelfareProgramCreateWithoutPaymentsInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    createdByUser: UserCreateNestedOneWithoutWelfareProgramsInput
    enrollments?: EnrollmentCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramCreateOrConnectWithoutPaymentsInput = {
    where: WelfareProgramWhereUniqueInput
    create: XOR<WelfareProgramCreateWithoutPaymentsInput, WelfareProgramUncheckedCreateWithoutPaymentsInput>
  }

  export type PaymentTrackerCreateWithoutPaymentInput = {
    id?: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    remainingAmount?: number
    prepaidAmount?: number
    user: UserCreateNestedOneWithoutPaymentTrackersInput
    welfareProgram: WelfareProgramCreateNestedOneWithoutPaymentTrackersInput
  }

  export type PaymentTrackerUncheckedCreateWithoutPaymentInput = {
    id?: string
    userId: string
    welfareProgramId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type PaymentTrackerCreateOrConnectWithoutPaymentInput = {
    where: PaymentTrackerWhereUniqueInput
    create: XOR<PaymentTrackerCreateWithoutPaymentInput, PaymentTrackerUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentTrackerCreateManyPaymentInputEnvelope = {
    data: PaymentTrackerCreateManyPaymentInput | PaymentTrackerCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPaymentsInput = {
    update: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type WelfareProgramUpsertWithoutPaymentsInput = {
    update: XOR<WelfareProgramUpdateWithoutPaymentsInput, WelfareProgramUncheckedUpdateWithoutPaymentsInput>
    create: XOR<WelfareProgramCreateWithoutPaymentsInput, WelfareProgramUncheckedCreateWithoutPaymentsInput>
    where?: WelfareProgramWhereInput
  }

  export type WelfareProgramUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: WelfareProgramWhereInput
    data: XOR<WelfareProgramUpdateWithoutPaymentsInput, WelfareProgramUncheckedUpdateWithoutPaymentsInput>
  }

  export type WelfareProgramUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutWelfareProgramsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutWelfareProgramNestedInput
  }

  export type PaymentTrackerUpsertWithWhereUniqueWithoutPaymentInput = {
    where: PaymentTrackerWhereUniqueInput
    update: XOR<PaymentTrackerUpdateWithoutPaymentInput, PaymentTrackerUncheckedUpdateWithoutPaymentInput>
    create: XOR<PaymentTrackerCreateWithoutPaymentInput, PaymentTrackerUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentTrackerUpdateWithWhereUniqueWithoutPaymentInput = {
    where: PaymentTrackerWhereUniqueInput
    data: XOR<PaymentTrackerUpdateWithoutPaymentInput, PaymentTrackerUncheckedUpdateWithoutPaymentInput>
  }

  export type PaymentTrackerUpdateManyWithWhereWithoutPaymentInput = {
    where: PaymentTrackerScalarWhereInput
    data: XOR<PaymentTrackerUpdateManyMutationInput, PaymentTrackerUncheckedUpdateManyWithoutPaymentInput>
  }

  export type UserCreateWithoutPaymentTrackersInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutUserInput
    payments?: PaymentCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserUncheckedCreateWithoutPaymentTrackersInput = {
    id?: string
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: $Enums.Role
    registeredAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    WelfarePrograms?: WelfareProgramUncheckedCreateNestedManyWithoutCreatedByUserInput
  }

  export type UserCreateOrConnectWithoutPaymentTrackersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentTrackersInput, UserUncheckedCreateWithoutPaymentTrackersInput>
  }

  export type WelfareProgramCreateWithoutPaymentTrackersInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    createdByUser: UserCreateNestedOneWithoutWelfareProgramsInput
    enrollments?: EnrollmentCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUncheckedCreateWithoutPaymentTrackersInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentUncheckedCreateNestedManyWithoutWelfareProgramInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramCreateOrConnectWithoutPaymentTrackersInput = {
    where: WelfareProgramWhereUniqueInput
    create: XOR<WelfareProgramCreateWithoutPaymentTrackersInput, WelfareProgramUncheckedCreateWithoutPaymentTrackersInput>
  }

  export type PaymentCreateWithoutPaymentTrackersInput = {
    id?: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
    user: UserCreateNestedOneWithoutPaymentsInput
    welfareProgram: WelfareProgramCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPaymentTrackersInput = {
    id?: string
    userId: string
    welfareProgramId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
  }

  export type PaymentCreateOrConnectWithoutPaymentTrackersInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPaymentTrackersInput, PaymentUncheckedCreateWithoutPaymentTrackersInput>
  }

  export type UserUpsertWithoutPaymentTrackersInput = {
    update: XOR<UserUpdateWithoutPaymentTrackersInput, UserUncheckedUpdateWithoutPaymentTrackersInput>
    create: XOR<UserCreateWithoutPaymentTrackersInput, UserUncheckedCreateWithoutPaymentTrackersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentTrackersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentTrackersInput, UserUncheckedUpdateWithoutPaymentTrackersInput>
  }

  export type UserUpdateWithoutPaymentTrackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutUserNestedInput
    payments?: PaymentUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUpdateManyWithoutCreatedByUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentTrackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    WelfarePrograms?: WelfareProgramUncheckedUpdateManyWithoutCreatedByUserNestedInput
  }

  export type WelfareProgramUpsertWithoutPaymentTrackersInput = {
    update: XOR<WelfareProgramUpdateWithoutPaymentTrackersInput, WelfareProgramUncheckedUpdateWithoutPaymentTrackersInput>
    create: XOR<WelfareProgramCreateWithoutPaymentTrackersInput, WelfareProgramUncheckedCreateWithoutPaymentTrackersInput>
    where?: WelfareProgramWhereInput
  }

  export type WelfareProgramUpdateToOneWithWhereWithoutPaymentTrackersInput = {
    where?: WelfareProgramWhereInput
    data: XOR<WelfareProgramUpdateWithoutPaymentTrackersInput, WelfareProgramUncheckedUpdateWithoutPaymentTrackersInput>
  }

  export type WelfareProgramUpdateWithoutPaymentTrackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutWelfareProgramsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateWithoutPaymentTrackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutWelfareProgramNestedInput
  }

  export type PaymentUpsertWithoutPaymentTrackersInput = {
    update: XOR<PaymentUpdateWithoutPaymentTrackersInput, PaymentUncheckedUpdateWithoutPaymentTrackersInput>
    create: XOR<PaymentCreateWithoutPaymentTrackersInput, PaymentUncheckedCreateWithoutPaymentTrackersInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutPaymentTrackersInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutPaymentTrackersInput, PaymentUncheckedUpdateWithoutPaymentTrackersInput>
  }

  export type PaymentUpdateWithoutPaymentTrackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPaymentTrackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type WelfareProgramCreateWithoutExpensesInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
    createdByUser: UserCreateNestedOneWithoutWelfareProgramsInput
    enrollments?: EnrollmentCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramUncheckedCreateWithoutExpensesInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdBy: string
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutWelfareProgramInput
    payments?: PaymentUncheckedCreateNestedManyWithoutWelfareProgramInput
    paymentTrackers?: PaymentTrackerUncheckedCreateNestedManyWithoutWelfareProgramInput
  }

  export type WelfareProgramCreateOrConnectWithoutExpensesInput = {
    where: WelfareProgramWhereUniqueInput
    create: XOR<WelfareProgramCreateWithoutExpensesInput, WelfareProgramUncheckedCreateWithoutExpensesInput>
  }

  export type WelfareProgramUpsertWithoutExpensesInput = {
    update: XOR<WelfareProgramUpdateWithoutExpensesInput, WelfareProgramUncheckedUpdateWithoutExpensesInput>
    create: XOR<WelfareProgramCreateWithoutExpensesInput, WelfareProgramUncheckedCreateWithoutExpensesInput>
    where?: WelfareProgramWhereInput
  }

  export type WelfareProgramUpdateToOneWithWhereWithoutExpensesInput = {
    where?: WelfareProgramWhereInput
    data: XOR<WelfareProgramUpdateWithoutExpensesInput, WelfareProgramUncheckedUpdateWithoutExpensesInput>
  }

  export type WelfareProgramUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutWelfareProgramsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramNestedInput
  }

  export type EnrollmentCreateManyUserInput = {
    id?: string
    welfareProgramId: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
  }

  export type PaymentCreateManyUserInput = {
    id?: string
    welfareProgramId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
  }

  export type PaymentTrackerCreateManyUserInput = {
    id?: string
    welfareProgramId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type WelfareProgramCreateManyCreatedByUserInput = {
    id?: string
    name: string
    description: string
    amount?: number
    expectedAmount?: number
    paymentCycle: $Enums.PaymentCycle
    createdAt?: Date | string
  }

  export type EnrollmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutPaymentsNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type PaymentTrackerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutPaymentTrackersNestedInput
    payment?: PaymentUpdateOneRequiredWithoutPaymentTrackersNestedInput
  }

  export type PaymentTrackerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentId?: StringFieldUpdateOperationsInput | string
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentTrackerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentId?: StringFieldUpdateOperationsInput | string
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type WelfareProgramUpdateWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutWelfareProgramNestedInput
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutWelfareProgramNestedInput
  }

  export type WelfareProgramUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    expectedAmount?: FloatFieldUpdateOperationsInput | number
    paymentCycle?: EnumPaymentCycleFieldUpdateOperationsInput | $Enums.PaymentCycle
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyWelfareProgramInput = {
    id?: string
    userId: string
    status: $Enums.EnrollmentStatus
    enrolledAt?: Date | string
  }

  export type PaymentCreateManyWelfareProgramInput = {
    id?: string
    userId: string
    amount?: number
    paymentDate?: Date | string
    paymentMode: $Enums.PaymentMode
    receiptNumber: string
    paystackreference?: string | null
    access_code?: string | null
    status?: $Enums.PaymentStatus | null
  }

  export type PaymentTrackerCreateManyWelfareProgramInput = {
    id?: string
    userId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    paymentId: string
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type ExpenseCreateManyWelfareProgramInput = {
    id?: string
    description: string
    amount?: number
    recordedAt?: Date | string
    recordedBy: string
  }

  export type EnrollmentUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    paymentTrackers?: PaymentTrackerUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    paymentTrackers?: PaymentTrackerUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateManyWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMode?: EnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paystackreference?: NullableStringFieldUpdateOperationsInput | string | null
    access_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
  }

  export type PaymentTrackerUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPaymentTrackersNestedInput
    payment?: PaymentUpdateOneRequiredWithoutPaymentTrackersNestedInput
  }

  export type PaymentTrackerUncheckedUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentId?: StringFieldUpdateOperationsInput | string
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentTrackerUncheckedUpdateManyWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentId?: StringFieldUpdateOperationsInput | string
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type ExpenseUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseUncheckedUpdateWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseUncheckedUpdateManyWithoutWelfareProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recordedBy?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentTrackerCreateManyPaymentInput = {
    id?: string
    userId: string
    welfareProgramId: string
    cycleStart: Date | string
    cycleEnd: Date | string
    paymentStatus: $Enums.PaymentStatus
    remainingAmount?: number
    prepaidAmount?: number
  }

  export type PaymentTrackerUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPaymentTrackersNestedInput
    welfareProgram?: WelfareProgramUpdateOneRequiredWithoutPaymentTrackersNestedInput
  }

  export type PaymentTrackerUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentTrackerUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    welfareProgramId?: StringFieldUpdateOperationsInput | string
    cycleStart?: DateTimeFieldUpdateOperationsInput | Date | string
    cycleEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    remainingAmount?: FloatFieldUpdateOperationsInput | number
    prepaidAmount?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}