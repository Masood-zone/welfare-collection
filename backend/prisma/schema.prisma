generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  phoneNumber       String    @unique
  password          String
  role              Role      @default(MEMBER) // MEMBER or ADMIN
  registeredAt      DateTime  @default(now())
  enrollments       Enrollment[]
  payments          Payment[]
  paymentTrackers   PaymentTracker[]
  WelfarePrograms   WelfareProgram[]
}

model WelfareProgram {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String
  amount        Float     @default(0.0)
  expectedAmount Float     @default(0.0)
  paymentCycle  PaymentCycle
  createdBy     String      // Admin who created the program
  createdByUser User       @relation(fields: [createdBy], references: [id],onDelete: Cascade)
  createdAt     DateTime    @default(now())
  enrollments    Enrollment[]     
  payments       Payment[]        
  paymentTrackers PaymentTracker[] 
  expenses       Expense[]        
}

model Enrollment {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  welfareProgramId String         
  welfareProgram  WelfareProgram  @relation(fields: [welfareProgramId], references: [id], onDelete: Cascade)
  status          EnrollmentStatus  // PENDING, APPROVED
  enrolledAt      DateTime        @default(now())
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  welfareProgramId String
  welfareProgram  WelfareProgram @relation(fields: [welfareProgramId], references: [id], onDelete: Cascade)
  amount          Float     @default(0.0)
  paymentDate     DateTime  @default(now())
  paymentMode     PaymentMode
  receiptNumber   String    @unique
  paymentTrackers PaymentTracker[]
  paystackreference String?
  access_code String?
  status          PaymentStatus?
}

model PaymentTracker {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  welfareProgramId String
  welfareProgram  WelfareProgram @relation(fields: [welfareProgramId], references: [id], onDelete: Cascade)
  cycleStart      DateTime
  cycleEnd        DateTime
  paymentStatus   PaymentStatus
  paymentId       String
  payment         Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  remainingAmount Float   @default(0)
  prepaidAmount   Float   @default(0)
}

model Expense {
  id            String    @id @default(cuid())
  description   String
  amount        Float     @default(0.0)
  welfareProgramId String
  welfareProgram WelfareProgram @relation(fields: [welfareProgramId], references: [id], onDelete: Cascade)
  recordedAt    DateTime  @default(now())
  recordedBy    String
}

model Analytics {
  id                String    @id @default(cuid())
  totalMembers      Int       @default(0)
  totalRevenue      Float   @default(0.0)
  recentPayments    Json      // Store recent transactions for analytics
  monthlyPayments   Json      // Monthly revenue stats
  weeklyPayments    Json      // Weekly revenue stats
  dailyPayments     Json      // Daily revenue stats
}

enum Role {
  MEMBER
  ADMIN
}

enum PaymentCycle {
  DAILY
  WEEKLY
  MONTHLY
}

enum FormStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMode {
  MOMO
  CARD
  CASH
}

enum PaymentStatus {
  PAID
  UNPAID
  PREPAID
}

